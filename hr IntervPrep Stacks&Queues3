
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static long largestRectangle(List<Integer> h) {
        Stack<Integer> stack = new Stack<>(); //index of buildings
        int i=0, topIndex=0;
        long area=0, max=Integer.MIN_VALUE;
        
        while(i<h.size()){
            if(stack.isEmpty() || h.get(stack.peek())<=h.get(i)) stack.push(i++);
            else{ //!stack.isEmpty() && h.get(stack.peek())>h.get(i)
                topIndex=stack.peek(); stack.pop();
                area=h.get(topIndex) * (stack.isEmpty() ? i:i-1-stack.peek());
                max=Math.max(area, max);
            }
        }
        
        while(!stack.isEmpty()){ //leftovers from stack
            topIndex=stack.peek(); stack.pop();
            area=h.get(topIndex) * (stack.isEmpty() ? i : i-1-stack.peek());
            max=Math.max(area, max);
        }
        
        return max;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> h = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        long result = Result.largestRectangle(h);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

//100%

/*import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static long largestRectangle(List<Integer> h) {
    // Write your code here
        Collections.sort(h);
        long max=Integer.MIN_VALUE;
        
        for(int i=0; i<h.size(); i++){
            max=Math.max((h.size()-i)*h.get(i), max);
        }
        return max;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> h = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        long result = Result.largestRectangle(h);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}*/
