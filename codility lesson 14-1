import java.util.*;

class Solution {
    public int solution(int K, int M, int[] A) {

        for(int i=0; i<A.length; i++){
            int bound1=A.length-1-i; //하나씩 줄어듬
            int [] sum = new int [K];

            if(bound1!=A.length-1){
                for(int j=bound1; j<A.length; j++)
                    int bound2=*; // bound1 ~ A.length
            }
            
            for(int j=0; j<bound1; j++){
                sum[0]+=A[j];
            }
            if(bound1+1==A.length){
                for(int j=bound1+1; j<A.length; j++){
                    sum[1]+=A[j];
                }
            }
            else if(boun1<A.length && bound2<A.length){
                for(int j=bound1+1; j<bound2; j++){
                    sum[1]+=A[j];
                }
                for(int j=bound2+1; j<A.length; j++){
                    sum[2]+=A[j];
                }
            }
        }
        
    }
} //0%


import java.util.*;

class Solution {
    public int solution(int K, int M, int[] A) {

        int max=0;
        int bound1=0;
        int bound2=0;
        int [] sum = new int [K];

        for(int i=0; i<A.length; i++){
            
            Arrays.fill(sum,0);

            bound1=A.length-1-i; //하나씩 줄어듬
            if(bound1!=A.length-1){
                for(int l=bound1; l<A.length; l++){
                    bound2=l;
                    for(int j=0; j<bound1; j++){
                        sum[0]+=A[j];
                    }
                    if(bound1+1==A.length){
                        for(int j=bound1+1; j<A.length; j++){
                            sum[1]+=A[j];
                        }
                    }
                    else if(bound1<A.length && bound2<A.length){
                        for(int j=bound1+1; j<bound2; j++){
                            sum[1]+=A[j];
                        }
                        for(int j=bound2+1; j<A.length; j++){
                            sum[2]+=A[j];
                        }
                    }
                    if(max<Math.max(sum[0], Math.max(sum[1], Math.max(0, sum[2]))))
                        max=Math.max(sum[0], Math.max(sum[1], Math.max(0, sum[2])));
                }
            }
        }

        return max;
        
    }
} //0%

import java.util.*;

class Solution {
    public int solution(int K, int M, int[] A) {

        int l=0;
        int r=M*A.length;
        int ans=M*A.length;

        while(l<=r) {
            int mid=l+(r-l)/2;
            int sum=0;
            int numGroup=1;
            int maxSum=0;

            for(int i=0; i<A.length; i++) {
                if(sum+A[i]>mid){
                    maxSum=Math.max(sum, maxSum);
                    sum=A[i];
                    numGroup++;
                }
                else sum+=A[i];
            }

            maxSum = Math.max(sum, maxSum);

            if (numGroup>K) l=mid+1;
            else {
                ans=Math.min(maxSum, ans); //smallest of the large group 
                r=mid-1;
            }
        }

        return ans;

    }
}

//https://blue-jay.tistory.com/40

//100%
