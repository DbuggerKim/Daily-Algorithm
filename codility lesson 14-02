// you can also use imports, for example:
import java.util.*;

// you can write to stdout for debugging purposes, e.g.
// System.out.println("this is a debug message");

class Solution {
    public int solution(int[] A, int[] B, int[] C) {
        
        int sum=0;

        for(int i=0; i<A.length; i++){
            for(int j=A[i]; j<B[i]; j++){
                for(int value : C){
                    if(value==j){
                        sum++;
                        break;
                    }
                }
            }
        }

        return sum;
    }
}

//0%

import java.util.*;

class Solution {
    public int solution(int[] A, int[] B, int[] C) {
        
        int sum=0;
        boolean chk[] = new boolean [C.length];
        Arrays.fill(chk, false);
        
        for(int j=0; j<A.length; j++){   
            for(int i=0; i<C.length; i++){     
                if(chk[i]==false && (A[j]<=C[i] && B[j]>=C[i])){
                    sum++;
                    
                    chk[i]=true;
                }
            }
        }

        return sum;
    }
}
//0%


import java.util.*;

class Solution {
    public int solution(int[] A, int[] B, int[] C) {
        
        int sum=0;
        int total=0;
        
        for(int j=0; j<A.length; j++){   
            for(int i=0; i<C.length; i++){     
                if(sum==0 && (A[j]<=C[i] && B[j]>=C[i])){
                    sum++;
                    total++;
                }
            }
            sum=0;
        }

        return total;
    }
}
//0%


import java.util.*;

class Solution {

    private int[][] nailArray;
    private int maxIndex = 0;

    private void setNailArray(int[] C) {
        nailArray = new int[C.length][2];
        int count = 1;
        for(int i=0; i<C.length; i++){
            nailArray[i][0] = count++;
            nailArray[i][1] = C[i];
        }
        Arrays.sort(nailArray, (int[] x, int[] y) -> x[1]-y[1]);
    }

    private boolean tryNail(int start, int end) {

        boolean success=false;
        int minIndex=Integer.MAX_VALUE;
        int successIndex=nailArray.length-1;
        int from=0;
        int to=nailArray.length-1;;

        while(from <= to) {
            int index=(int)Math.ceil((float)(from+to)/2);
            int[]nail=nailArray[index];

            if(start>nail[1]) from=index+1;
            else if(end<nail[1]) to=index-1;
            else{
                to=index-1;
                successIndex=index;
                success=true;
            }
        }

        if(success){
            for(int i=successIndex; i<nailArray.length; i++) {
                int[] nail=nailArray[i];
                if(nail[1]>end) break;
                if(nail[0]<minIndex) minIndex=nail[0];
                if(minIndex<=maxIndex) break;
            }
            if(minIndex>maxIndex) maxIndex=minIndex;
        }
        return success;
    }

    public int solution(int[] A, int[] B, int[] C) {
        setNailArray(C);
        for(int i=0; i<A.length; i++)
            if(!tryNail(A[i], B[i])) return -1;
        return maxIndex;
    }

}
//100%
