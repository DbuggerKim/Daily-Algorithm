import java.util.*;

class Solution {
   
    class Truck {
        int weight;
        int entry;
        
        Truck(int weight, int entry){
            this.weight = weight;
            this.entry = entry;
        }
    }
    
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        Queue<Truck> waiting = new LinkedList<>();
        Queue<Truck> bridge = new LinkedList<>();
        
        for(int i = 0 ; i < truck_weights.length ; ++i){
            waiting.offer(new Truck(truck_weights[i], 0));
        }
        //enque 시 .add() 비슷한 기능
        //경고문구가 사라지지 않음
        
        int time = 0;
        int totalWeight = 0;
        
        while(!waiting.isEmpty() || !bridge.isEmpty()){   
        	time++;
        	if(!bridge.isEmpty()) {
        		Truck t = bridge.peek();
        		if(time - t.entry >= bridge_length) {
        			totalWeight -= t.weight;
        			bridge.poll();
        		}
        	}
        	
        	if(!waiting.isEmpty()) {
        		if(totalWeight + waiting.peek().weight <= weight) {
        			Truck t = waiting.poll();
        			totalWeight += t.weight;
        			
        			bridge.offer(new Truck(t.weight, time));
        		}
        	}
        }
        
        return time;
    }
}//100%

import java.util.*;

class Truck {
    int weight;
    int time;
    Truck(int weight, int time) {
        this.weight=weight;
        this.time=time;
    }
}

class Solution {
    public int solution(int bridge_length, int weight, int[] truck_weights) {
        Queue<Truck> waiting=new LinkedList<>();
        Queue<Truck> bridge=new LinkedList<>();
        for(int i=0; i<truck_weights.length; i++) waiting.offer(new Truck(truck_weights[i],0));
        
        int totalTime=0;
        int totalWeight=0;
        while(!bridge.isEmpty() || !waiting.isEmpty()) {
            totalTime++;
            if(!bridge.isEmpty()) {
                Truck t=bridge.peek();
                if(totalTime-t.time >= bridge_length) {
                    totalWeight-=t.weight;
                    bridge.poll();
                }
            }
            if(!waiting.isEmpty()) {
                Truck t=waiting.peek();
                if(totalWeight+t.weight <= weight) {
                    totalWeight+=t.weight;
                    bridge.add(new Truck(t.weight, totalTime));
                    waiting.poll();
                }
            }
        }
        
        return totalTime;
    }
} //100%
