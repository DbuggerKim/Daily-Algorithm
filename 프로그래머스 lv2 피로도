import java.util.*;

class Solution {

    int answer=0;
    boolean[] flag;
    
    public void dfs(int d, int k, int[][]dungeons){
        for(int i=0; i<dungeons.length; i++){
            if(dungeons[i][0]<=k && !flag[i]){
                flag[i]=true;
                dfs(d+1, k-dungeons[i][1], dungeons);
                flag[i]=false;
            }
        }
        answer=Math.max(answer, d);
    }
    
    public int solution(int k, int[][] dungeons) {
        flag = new boolean[dungeons.length];
        dfs(0, k, dungeons);
        return answer;
    }
} //100%

class Solution {
    int answer=Integer.MIN_VALUE;
    boolean[] visit;
    
    public void dfs(int count, int k, int[][] dungeons){
        for(int i=0; i<dungeons.length; i++){
            if(dungeons[i][0]<=k && !visit[i]){
                visit[i]=true;
                dfs(count+1,k-dungeons[i][1],dungeons);
                visit[i]=false;
            }
        }
        answer=Math.max(answer, count);
    }
    
    public int solution(int k, int[][] dungeons) {
        visit=new boolean[dungeons.length];
        dfs(0, k, dungeons);
        return answer;
    }
} //100%
