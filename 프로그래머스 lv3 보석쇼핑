//투포인터
import java.util.*;

class Solution {
    public int[] solution(String[] gems) {
        int[] answer=new int[2];
        HashSet<String> set=new HashSet<>();
        for(String s : gems) set.add(s);
        
        int distance=Integer.MAX_VALUE;
        int left=0, right=0, start=0, end=0;
        
        HashMap<String, Integer> map=new HashMap<>();
        while(true){
            if(set.size()==map.size()) {
                map.put(gems[left], map.get(gems[left])-1);
                if(map.get(gems[left])==0) map.remove(gems[left]);
                left++;
                if(right-left<distance){
                    distance=right-left;
                    start=left;
                    end=right;
                }
            }
            else if(right==gems.length) break;
            else{
                map.put(gems[right], map.getOrDefault(gems[right], 0) + 1);
                right++;
            }
        }
        
        answer[0]=start;
        answer[1]=end;
        
        return answer;
    }
}

/*
import java.util.*;

class Solution {
    
    boolean[] visit;
    
    /*public void bfs(String[] gems, boolean[] visit, String output, int count){
        for(int i=0; i<gems.length; i++){
            if(){
                visit[i]=true;
                bfs(gems, visit, output+" "+gems[i], count+1);
                visit[i]=false;
            }
        }
    }*/
    
    public int[] solution(String[] gems) {
        int[] answer = {};
        visit = new boolean [gems.length];
        
        HashSet <String> set = new HashSet <>();
        for(int i=0; i<gems.length; i++) set.add(gems[i]);
        System.out.println(set.size());
        
        return answer;
    }
}
*/

import java.util.*;

class Solution {
    public int[] solution(String[] gems) {
        HashSet<String> set = new HashSet<>();
        for(String g:gems) set.add(g);
        
        int distance=Integer.MAX_VALUE, left=0, right=0, start=0, end=0;
        
        HashMap<String, Integer> map = new HashMap<>();
        while(true) {
            if(set.size()==map.size()) {
                map.put(gems[left], map.get(gems[left])-1);
                if(map.get(gems[left])==0) map.remove(gems[left]);
                left++; //gems index 움직임
                if(right-left<distance) {
                    distance=right-left;
                    start=left;
                    end=right;
                }
            }
            else if(right==gems.length) break;
            else {
                map.put(gems[right],map.getOrDefault(gems[right],0)+1);
                right++; //gems index 움직임
            }
        }
        
        int[] answer=new int[2];
        answer[0]=start;
        answer[1]=end;
        return answer;
    }
} //100%
