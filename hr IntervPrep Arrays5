import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
    
    static int sum=9999;
    
    public static void minimumBribes(List<Integer> q) {
    // Write your code here
    
        int ret = 0;
        int []arr=new int[q.size()];
        
        for(int i=0; i<q.size(); i++)
            arr[i]=q.get(i);
            
        for(int i=arr.length-1; i>=0; i--) {
            if(arr[i]-(i+1)>2) { //3
                System.out.println("Too chaotic");
                return;
            }
            for(int j=Math.max(0, arr[i]-2); j<i; j++) //2
                if(arr[j]>arr[i]) ret++;
        }

        System.out.println(ret);
 
        /*int total=0;
        
        for(int i=0; i<q.size(); i++){
            for(int j=i; j<q.size(); j++){
                if(arr[i]>arr[j]){
                    int temp=arr[i];
                    arr[i]=arr[j];
                    arr[j]=temp;
                    total++;
                }
            }
        }
        
        if(sum>total) sum=total;
        
        if(sum>2) {
            System.out.println("Too chaotic");
            System.out.println(sum);
        }*/
                
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> q = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                Result.minimumBribes(q);
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
    }
}
