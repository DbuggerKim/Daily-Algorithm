/*
import java.util.*;

class Solution {
    public int solution(int k, int[] tangerine) {
        int answer = 0;
        
        HashMap<Integer, Integer>map=new HashMap<>();
        for(int i=0; i<tangerine.length; i++) {
            map.put(tangerine[i],map.getOrDefault(tangerine[i],0)+1);
        }
        
        String[] arr = new String[map.size()];
        for(Integer val : map.keySet()){
            arr[val-1]=Integer.toString(map.get(val))+" "+Integer.toString(val);
            //System.out.println(arr[val-1]);
        }
        
        Arrays.sort(arr, Comparator.reverseOrder());
        for(int i=0; i<arr.length; i++) {
            String[] sub=arr[i].split(" ");
            int n=Integer.parseInt(sub[0]);
            if(k-n>=0) {
                k-=n;
                answer+=1;
            }
            else continue;
            //System.out.println(arr[i]);
        }
        
        return answer;
    }
}*/ //20%

/*
import java.util.*;

class Solution {
    public int solution(int k, int[] tangerine) {
        int answer = 0;
        
        HashMap<Integer, Integer>map=new HashMap<>();
        for(int i=0; i<tangerine.length; i++) {
            map.put(tangerine[i],map.getOrDefault(tangerine[i],0)+1);
        }
        
        ArrayList<Integer> list = new ArrayList<>();
        for(Integer val : map.keySet()){
            list.add(map.get(val));
        }
        
        Collections.sort(list,Collections.reverseOrder());
        for(int i=0; i<list.size(); i++) {
            int n=list.get(i);
            if(k<0) return answer;
            if(k-n>=0) {
                k-=n;
                answer+=1;
            }
        }
        
        return answer;
    }
}*/ //70%

//arr보단 list 활용시 크기미정시 유리함
import java.util.*;

class Solution {
    public int solution(int k, int[] tangerine) {
        int answer = 0;
        
        HashMap<Integer, Integer>map=new HashMap<>();
        for(int i=0; i<tangerine.length; i++) {
            map.put(tangerine[i],map.getOrDefault(tangerine[i],0)+1);
        }
        
        ArrayList<Integer> list = new ArrayList<>();
        for(Integer val : map.keySet()){
            list.add(map.get(val));
        }
        
        Collections.sort(list,Collections.reverseOrder());
        for(int i=0; i<list.size(); i++) {
            int n=list.get(i);
            if(k>0) {
                k-=n;
                answer+=1;
            }
        }
        return answer;
    }
} //100%
