from collections import deque

def get(pos,board):
  nextpos=[]
  pos=list(pos)
  pos1x,pos1y,pos2x,pos2y=pos[0][0],pos[0][1],pos[1][0],pos[1][1]
  dx=[-1,1,0,0]
  dy=[0,0,-1,1]
  for i in range(4):
    nextpos1x,nextpos1y,nextpos2x,nextpos2y=pos1x+dx[i],pos1y+dy[i],pos2x+dx[i],pos2y+dy[i]
    if board[nextpos1x][nextpos1y]==0 and board[nextpos2x][nextpos2y]==0:
      nextpos.append({(nextpos1x,nextpos1y),(nextpos2x,nextpos2y)})
  if pos1x==pos2x:
    for i in [-1,1]:
      if board[pos1x+i][pos1y]==0 and board[pos2x+i][pos2y]==0:
        nextpos.append({(pos1x,pos1y),(pos1x+i,pos1y)})
        nextpos.append({(pos2x,pos2y),(pos2x+i,pos2y)})
  elif pos1y==pos2y:
    for i in [-1,1]:
      if board[pos1x][pos1y+i]==0 and board[pos2x][pos2y+i]==0:
        nextpos.append({(pos1x,pos1y),(pos1x,pos1y+i)})
        nextpos.append({(pos2x,pos2y),(pos2x,pos2y+i)})
  return nextpos

def solution(board):
  n=len(board)
  newboard=[[1]*(n+2) for _ in range(n+2)]
  for i in range(n):
    for j in range(n):
      newboard[i+1][j+1]=board[i][j]
  q=deque()
  visit=[]
  pos={(1,1),(1,2)}
  q.append((pos,0))
  visit.append(pos)
  while q:
    pos,cost=q.popleft()
    if(n,n) in pos: return cost
    for nextpos in get(pos,newboard):
      if nextpos not in visit:
        q.append((nextpos,cost+1))
        visit.append(nextpos)
  return 0
