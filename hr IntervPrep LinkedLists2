import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    static class SinglyLinkedListNode {
        public int data;
        public SinglyLinkedListNode next;

        public SinglyLinkedListNode(int nodeData) {
            this.data = nodeData;
            this.next = null;
        }
    }

    static class SinglyLinkedList {
        public SinglyLinkedListNode head;
        public SinglyLinkedListNode tail;

        public SinglyLinkedList() {
            this.head = null;
            this.tail = null;
        }

        public void insertNode(int nodeData) {
            SinglyLinkedListNode node = new SinglyLinkedListNode(nodeData);

            if (this.head == null) {
                this.head = node;
            } else {
                this.tail.next = node;
            }

            this.tail = node;
        }
    }

    public static void printSinglyLinkedList(SinglyLinkedListNode node, String sep, BufferedWriter bufferedWriter) throws IOException {
        while (node != null) {
            bufferedWriter.write(String.valueOf(node.data));

            node = node.next;

            if (node != null) {
                bufferedWriter.write(sep);
            }
        }
    }

    public static int findMergeNode(SinglyLinkedListNode head1, SinglyLinkedListNode head2) {
        
        SinglyLinkedListNode temp1 = new SinglyLinkedListNode(head1.data);
        SinglyLinkedListNode temp2 = new SinglyLinkedListNode(head2.data);
        temp1=head1;
        temp2=head2;
        
        while(temp1!=temp2){
            if(temp1.next==null) temp1=head1;
            else temp1=temp1.next;
            
            if(temp2.next==null) temp2=head2;
            else temp2=temp2.next;
        }
        return temp1.data;
    }
    
    /*static int findMergeNode(SinglyLinkedListNode head1, SinglyLinkedListNode head2) {
        
        SinglyLinkedListNode temp1 = new SinglyLinkedListNode(head1.data);
        SinglyLinkedListNode temp2 = new SinglyLinkedListNode(head2.data);
        temp1=head1;
        temp2=head2;
        
        while(temp1!=0 || temp2!=0){
            if(temp1.data!=temp2.data){
                temp1=head1.next;
                temp1.data=head1.data;
                temp2=head2.next;
                temp2.data=head2.data;
            }
            break; 
        }
        return temp1.data;
    }*/

    private static final Scanner scanner = new Scanner(System.in);
