
//https://tosuccess.tistory.com/22

import java.util.*;

public class Solution {
    
    int[] findParent;//부모와 자식의 정보가 담긴 배열
    
    public int find(int child) {//부모 찾기
        if(findParent[child]==child) return child;
        else return findParent[child]=find(findParent[child]);
    }
    
    public int solution(int n, int[][] costs) {
        
        Arrays.sort(costs, (o1,o2)->o1[2]-o2[2]);//가중치 기준으로 오름차순
        findParent=new int[n];//초기배열에서 부모는 자기 자신
        for(int i=0; i<n; i++) findParent[i]=i;
        
        int answer=0;
        for(int i=0; i<costs.length; i++) {
            int start=find(costs[i][0]);
            int end=find(costs[i][1]);
            int cost=costs[i][2];
            if(start!=end) {//부모가 같지 않다면 연결이 안된 최솟값이므로
                findParent[end]=start;//연결
                answer+=cost;                    
            }
        }
        
        return answer;
    }
} //100%

/*
풀이 방식은 이렇다.
1. costs 배열을 건설 비용을 기준으로 오름차순으로 정렬한다.
2. costs 배열을 처음 부터 돌며 연결할 양쪽 섬의 부모가 같은지 판별한다. 2-1 부모가 같으면 해당 다리는 건설하지 않는다. ...
3. 배열을 돌며 건설할 다리 비용을 합산한 answer을 return한다.
*/
