from collections import deque
from sys import stdin
input = stdin.readline

n,m=map(int, input().split())
#문자열 이차원 배열 입력 받음
board=[list(input().strip()) for _ in range(n)]
visit=[[[[False]*m for _ in range(n)] for _ in range(m)] for _ in range(n)]
dx=[-1, 0, 1, 0]
dy=[0, 1, 0, -1]
q=deque()

def init():
    rx,ry,bx,by=0,0,0,0
    for i in range(n):
        for j in range(m):
            if board[i][j]=='R': rx,ry=i,j
            elif board[i][j]=='B': bx,by=i,j
    q.append((rx,ry,bx,by,1))
    visit[rx][ry][bx][by]=True
    
def move(x,y,dx,dy):
    count=0
    while board[x+dx][y+dy]!='#' and board[x][y]!='O':
        x+=dx
        y+=dy
        count+=1
    return x,y,count

def bfs():
    init()
    while q:
        rx,ry,bx,by,depth=q.popleft()
        if depth>10: 
          print(-1)
          break
        for i in range(4):
            nrx,nry,rcount=move(rx,ry,dx[i],dy[i])
            nbx,nby,bcount=move(bx,by,dx[i],dy[i])
            if board[nbx][nby]=='O':
                continue
            if board[nrx][nry]=='O':
                print(depth)
                return
            if nrx==nbx and nry==nby :
                # 이동 거리가 많은 구슬을 한칸 뒤로
                if rcount>bcount: 
                    nrx-=dx[i]
                    nry-=dy[i]
                else:
                    nbx-=dx[i]
                    nby-=dy[i]
            if not visit[nrx][nry][nbx][nby]:
                visit[nrx][nry][nbx][nby]=True
                q.append((nrx,nry,nbx,nby,depth+1))

bfs()
