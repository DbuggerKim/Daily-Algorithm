import java.util.*;

class Solution {

    HashMap<Integer, Integer> map= new HashMap<>();

    public int fibo(int num){
        if(num==0) return 0;
        if(num==1) return 1;
        if(map.containsKey(num)) return map.get(num);
        else{ 
            map.put(num,fibo(num-1)+fibo(num-2));
            return map.get(num);
        }
    }

    class Point{
        int x,y;
        public Point(int x, int y){
            this.x=x;
            this.y=y;
        }
    }

    public int solution(int[] A) {
        
        int N=A.length;
        for(int i=0; fibo(i)<=N+1; i++) fibo(i);
        ArrayList<Integer> list = new ArrayList<>(map.values()); 
        Collections.reverse(list);

        boolean[] check = new boolean[N+1];
        Queue<Point> queue = new LinkedList<>();
        queue.add(new Point(-1,0));
        //x : now pointer, y : jumps

        while(!queue.isEmpty()){ //bfs MST
            Point currentPoint = queue.poll();
            for(int fib: list){
                int next=currentPoint.x+fib;
                if(next==N) return currentPoint.y+1;
                else if(next<N && next>=0){
                    if(A[next]==1 && !check[next]){
                        check[next]=true;
                        Point point = new Point(next, currentPoint.y+1);
                        queue.add(point);
                    }
                }
            }
        }

        return -1;
    }
}

//BFS는 가까운 곳을 먼저 방문하기 때문에 최소경로를 찾을 수 있는 알고리즘
//100%
