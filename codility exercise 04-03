/*import java.util.*;

class Solution {

    public int solution(Tree T) {
        
        int left=0;
        int right=0;

        Tree cur = T;
        while(cur.r!=null){
            right++;
            cur=cur.r;
        }

        cur=T;
        while(cur.l!=null){
            left++;
            cur=cur.l;
        }

        return Math.max(left, right);
    }
}*/ //66%

/*import java.util.*;

class Solution {

    public int solution(Tree T) {

        if(T==null) return -1;
        else if(T!=null){
            if(T.l==null && T.r==null) return 0;
        }
        
        int left=0;
        int right=0;

        Tree cur = T;
        while(cur.r!=null){
            right++;
            cur=cur.r;
        }

        cur=T;
        while(cur.l!=null){
            left++;
            cur=cur.l;
        }

        return Math.max(left, right);
    }
}*/ 66%


/*class Solution {
    public int solution(Tree T) {
        // write your code in Java SE 8
        if(T==null) return -1;
        if(T.l==null && T.r==null) return 0;
        return (Math.max(solution(T.l), solution(T.l)) + 1);
    }
}
//66%*/

/*
import java.util.*;

class Solution {

    public int solution(Tree T) {

        if(T==null) return -1;
        else if(T!=null){
            if(T.l==null && T.r==null) return 0;
        }
        
        int answer=0;
        int left=0;
        int right=0;

        Tree cur = T;
        while(cur.l!=null){
            left++;
            cur=cur.l;
        } //left++;

        cur=T;
        while(cur.r!=null){
            right++;
            cur=cur.r;
        } right++;

        if(left==right) answer=left;
        else answer=Math.max(left, right);

        return answer;
    }
}
*/ //88%



import java.util.*;

class Solution {

    public int solution(Tree T) {

        if(T==null) return -1;
        if(T.l==null && T.r==null) return 0;
        
        return (Math.max(solution(T.l), solution(T.r)) + 1); //0끝까지 한단계씩 1더해줌
    }
}
//100%
