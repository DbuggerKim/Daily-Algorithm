import java.util.*;

class Solution {
    public int solution(int N) {
  
        int min=Integer.MAX_VALUE;
        int a=0;
        int b=0;

        for(int i=1; i<=N; i++){
            if(N%i==0){
                a=i;
                b=N/i;
                if(min>perimeter(a,b)) min=perimeter(a,b);
            }
        }

        return min;
    }

    public int perimeter(int a, int b){
        return 2*(a+b);
    }
} //60%

import java.util.*;

class Solution {
    public int solution(int N) {
  
        int min=Integer.MAX_VALUE;
        int a=0;
        int b=0;

        for(int i=1; i<Math.sqrt(N); i++){
            if(N%i==0){
                a=i;
                b=N/i;
                if(min>perimeter(a,b)) min=perimeter(a,b);
            }
        }
        return min;
    }

    public int perimeter(int a, int b){
        return 2*(a+b);
    }
} //70%


import java.util.*;

class Solution {
    public int solution(int N) {
  
        int min=Integer.MAX_VALUE;
        int a=0;
        int b=0;

        for(int i=1; i*i<N; i++){
            if(N%i==0){
                a=i;
                b=N/i;
                if(min>perimeter(a,b)) min=perimeter(a,b);
            }
        }
        return min;
    }

    public int perimeter(int a, int b){
        return 2*(a+b);
    }
}
//70%


import java.util.*;

class Solution {
    public int solution(int N) {
  
        int min=Integer.MAX_VALUE;
        int a=0;
        int b=0;
        int n=(int)Math.sqrt(N);

        for(int i=1; i<=n; i++){ //절반만 탐색하도록
            if(N%i==0){
                a=i;
                b=N/i;
                if(min>perimeter(a,b)) min=perimeter(a,b);
            }
        }
        return min;
    }

    public int perimeter(int a, int b){
        return 2*(a+b);
    }
}
//100%
