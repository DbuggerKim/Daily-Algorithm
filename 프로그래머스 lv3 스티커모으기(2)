//DP문제해결
//https://iron-jin.tistory.com/entry/프로그래머스-스티커-모으기2


class Solution {
    
    public int solution(int sticker[]) {
        int answer = 0;
        int len = sticker.length;
        if (len == 1) return sticker[0];

        int[] dp1 = new int[len];
        int[] dp2 = new int[len];

        //첫번째 스티커를 떼는 방법 무조건 선택되어야해서 dp[1] 조작
        dp1[0] = sticker[0];
        dp1[1] = sticker[0];
        for (int i=2; i<len-1; i++) dp1[i]=Math.max(dp1[i-1], dp1[i-2] + sticker[i]);


        //첫번째 스티커를 뗴지 않는 방법 첫번째 값 빼곤 무조건 선택되지 않아도됨 더했을때 큰값으로
        dp2[0] = 0;
        dp2[1] = sticker[1];
        for (int i=2; i<len; i++) dp2[i]=Math.max(dp2[i-1], dp2[i-2] + sticker[i]);

        answer = Math.max(dp1[len-2], dp2[len-1]);

        return answer;
    }
}



/*class Solution {
    
    public int solution(int sticker[]) {
        int answer1 = 0;
        int answer2 = 0;
        
        if(sticker.length%2==0){
            for(int i=0; i<sticker.length; i+=2) answer1+=sticker[i];
            for(int i=1; i<sticker.length; i+=2) answer2+=sticker[i];
        }
        else{
            for(int i=0; i<sticker.length-1; i+=2) answer1+=sticker[i];
            for(int i=1; i<sticker.length; i+=2) answer2+=sticker[i];
        }

        return Math.max(answer1, answer2);
    }
}*/

class Solution {
    public int solution(int sticker[]) {
        if(sticker.length==1) return sticker[0];
        
        //첫번째 스티커를 떼는 방법
        int[] dp1=new int[sticker.length];
        dp1[0]=sticker[0];
        dp1[1]=sticker[0];
        for(int i=2; i<sticker.length-1; i++) dp1[i]=Math.max(dp1[i-1], dp1[i-2]+sticker[i]);

        //첫번째 스티커를 떼지 않는 방법
        int[] dp2=new int[sticker.length];
        dp2[0]=0;
        dp2[1]=sticker[1];
        for(int i=2; i<sticker.length; i++) dp2[i]=Math.max(dp2[i-1], dp2[i-2]+sticker[i]);

        return Math.max(dp1[len-2], dp2[len-1]);
    }
} //100%

class Solution {
    public int solution(int sticker[]) {
        if(sticker.length==1) return sticker[0];
        
        int[] dp1=new int[sticker.length];
        dp1[0]=sticker[0];
        dp1[1]=sticker[0];
        for(int i=2; i<sticker.length-1; i++) dp1[i]=Math.max(dp1[i-1], dp1[i-2]+sticker[i]);
        
        int[] dp2=new int[sticker.length];
        dp2[0]=0;
        dp2[1]=sticker[1];
        for(int i=2; i<sticker.length; i++) dp2[i]=Math.max(dp2[i-1], dp2[i-2]+sticker[i]);
        
        return Math.max(dp1[sticker.length-2], dp2[sticker.length-1]);
    }
} //100%
