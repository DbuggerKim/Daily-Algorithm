//https://wellbell.tistory.com/116
/*class Solution { 
    public String solution(int n, int t, int m, int p) {
        StringBuilder sb = new StringBuilder();
        StringBuilder answer = new StringBuilder();

        int num = 0;

        // m명이 t번 말하는 경우까지 구함
        while(sb.length()<m*t) {
            sb.append(calc(num++, n));
        }

        // 첫번째 == 0
        // 문자열은 0부터 이므로 p-1부터
        // 튜브가 말할 것만 알면되기 때문에 +m 씩 증가
        for(int i=p-1; i <m*t; i =i+m) {
            answer.append(sb.charAt(i));
        }
        return answer.toString();
    }

    // num을 radix 진법으로 변환
    public String calc(int num, int radix) {
        StringBuilder sb = new StringBuilder();

        // 만약 진법 변환할 숫자가 진법보다 큰 경우
        while(num >= radix) {
            sb.append(isMoreThanTen(num % radix));
            num = num / radix;
        }
        // 진법보다 작아진 수를 추가
        sb.append(isMoreThanTen(num));

        // 뒤집어서 리턴 - > 8을 2진법으로 위 로직을 돌리면 0001 됨
        return sb.reverse().toString();
    }

    // 10 이상의 숫자를 알파벳으로 변환(11진법 이상에서 A와 같은 알파벳을 위해)
    public char isMoreThanTen(int n) {
        if (n >= 10) {
            return (char) (n - 10 + 'A');
        }
        return (char) (n + '0');
    }
}*/


class Solution {
    public String solution(int n, int t, int m, int p) {
        
        StringBuilder sb = new StringBuilder();
        StringBuilder answer = new StringBuilder();
        int num = 0;

        // m명이 t번 말하는 경우까지 구함
        while(sb.length()<m*t) {
            sb.append(Integer.toString(num++, n));
        }

        // 문자열은 0부터 이므로 p-1부터
        // 튜브가 말할 것만 알면되기 때문에 +m 씩 증가
        for(int i =p-1; i<m*t; i=i+m) {
            answer.append(sb.charAt(i));
        }
        return answer.toString().toUpperCase();
    }
} //100%
