import java.util.Queue;
import java.util.LinkedList;
import java.util.Arrays;

class Solution {
    // 위, 아래의 경우만 생각해주면 된다.
    public int solution(int m, int n, int[][] puddles) {
        int answer = 0;
        
        int[][] d = new int[n+1][m+1];
        
        for(int i=0; i<puddles.length; i++) {
            d[puddles[i][1]][puddles[i][0]] = -1;
        }
        
        d[1][1] = 1;
        
        for(int i=1; i<=n; i++) {
            for(int j=1; j<=m; j++) {
                if(d[i][j] == -1) {
                    continue;
                }
                if(d[i][j-1] >= 0 && d[i][j] >= 0) {
                    d[i][j] += d[i][j-1] %1000000007 ;
                }
                if(d[i-1][j] >= 0 && d[i][j] >= 0) {
                    d[i][j] += d[i-1][j] % 1000000007;
                }
            }
        }

        answer = d[n][m]%1000000007;
        
        return answer;
    }
} //100%


import java.util.*;

class Solution {
    
    public int solution(int m, int n, int[][] puddles) {
        int answer = 0;
        int[][] d = new int[n+1][m+1];
        for(int i=0; i<puddles.length; i++) {
            d[puddles[i][1]][puddles[i][0]] = -1;
        }
        
        d[1][1] = 1;
        
        for(int i=1; i<=n; i++) {
            for(int j=1; j<=m; j++) {
                if(d[i][j] == -1) {
                    continue;
                }
                if(d[i][j-1] >= 0 && d[i][j] >= 0) { //위에서부터 아래로
                    d[i][j] += d[i][j-1] %1000000007 ;
                }
                if(d[i-1][j] >= 0 && d[i][j] >= 0) { //왼쪽으로부터 오른쪽으로
                    d[i][j] += d[i-1][j] % 1000000007;
                }
            }
        }

        answer = d[n][m]%1000000007;
        
        return answer;
    }
} //100%



import java.util.*;

class Solution {
    public int solution(int m, int n, int[][] puddles) {

        int[][] dp=new int [n+1][m+1];
        for(int i=0; i<puddles.length; i++) dp[puddles[i][1]][puddles[i][0]]=-1;
        dp[1][1]=1; //시작
        
        for(int i=1; i<=n; i++) {
            for(int j=1; j<=m; j++) {
                if(dp[i][j]==-1) continue;
                if(dp[i][j]>=0 && dp[i-1][j]>=0) {
                    dp[i][j]+=dp[i-1][j]%1000000007; //오른쪽 방향 : 좌>>우
                }
                if(dp[i][j]>=0 && dp[i][j-1]>=0) {
                    dp[i][j]+=dp[i][j-1]%1000000007; //아래쪽 방향 : 위>>아래
                }
            }
        }
        
        int answer=dp[n][m]%1000000007;
        return answer;
    }
}//100%
