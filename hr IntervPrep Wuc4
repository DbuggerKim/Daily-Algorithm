import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {


    public static int sockMerchant(int n, List<Integer> ar) {
        
        int total=0;
        int arr [] = new int [ar.size()];
        HashMap <Integer, Integer> map = new HashMap <Integer, Integer>();
        
        for(int i=0; i<arr.length; i++) arr[i]=ar.get(i);
        
        for(int i=0; i<arr.length; i++)
            map.put(arr[i], map.getOrDefault(arr[i], 0)+1);
            
        for(Integer key : map.keySet())
            if(map.get(key)>=2){
                int k=map.get(key);
                total+=k/2;
            }
        
        return total;
        
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> ar = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.sockMerchant(n, ar);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

