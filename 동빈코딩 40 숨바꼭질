import heapq

INF=int(1e9)

n,m=map(int,input().split())
graph=[[] for i in range(n+1)]
for _ in range(m):
  #a번 노드와 b번 노드의 이동 비용 1
  a,b=map(int,input().split())
  graph[a].append((b,1))
  graph[b].append((a,1))

distance=[INF]*(n+1)
def dikstra(start):
  q=[]
  heapq.heappush(q,(0,start))
  distance[start]=0
  while q:
    dist,now=heapq.heappop(q)
    if distance[now]<dist: continue
    for i in graph[now]:
      cost=dist+i[1]
      if cost<distance[i[0]]:
        distance[i[0]]=cost
        heapq.heappush(q,(cost,i[0]))

start=1
dikstra(start)

maxnode=0
maxdist=0
result=[]
for i in range(1,n+1):
  if maxdist<distance[i]:
    maxnode=i
    maxdist=distance[i]
    result=[maxnode] #초기값
  elif maxdist==distance[i]:
    result.append(i)
print(maxnode,maxdist,len(result))
