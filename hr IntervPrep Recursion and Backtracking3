import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*public static long stepPerms(long n) {
            long total=0;
            if(n<=0) return 0;
            if(n == 1) return 1;
            else if(n == 2) return 2;
            else if(n == 3) return 4;
            else total = (stepPerms(n-1)+stepPerms(n-2)+stepPerms(n-3));
            return total;
    }*/ //recursion TO
    
    public static int stepPerms(int n) {
        int[] array = new int[n];
        if(n == 1) return 1;
        else if(n == 2) return 2;
        else if(n == 3) return 4;
        
        array[0] = 1;
        array[1] = 2;
        array[2] = 4;
        for(int i=3; i<n; i++) array[i]=array[i-1]+array[i-2]+array[i-3];

        return array[array.length-1];
    } //DP 100%

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int s = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, s).forEach(sItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                int res = Result.stepPerms(n);

                bufferedWriter.write(String.valueOf(res));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
