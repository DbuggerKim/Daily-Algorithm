import java.util.Arrays;
import java.util.Comparator;

class Solution {
    public int[] solution(int N, int[] stages) {
        int[] answer = new int[N];
        double[][] cnt = new double[N+1][3];
       
        for(int i=0 ; i<stages.length; i++){
            if(stages[i]>N) continue;
            cnt[stages[i]][0]++;
        }
        
        cnt[1][1] = stages.length;
        cnt[1][2] = 1;
        
        for(int i=2; i<cnt.length; i++){
            cnt[i][1] = (int)(cnt[i-1][1]-cnt[i-1][0]);
            cnt[i][2] = i;          
        }
        
        for(int i=1; i<cnt.length; i++){
            if(cnt[i][1] == 0){
                cnt[i][0] = 0;
                continue;
            }
            cnt[i][0] = cnt[i][0]/cnt[i][1];
        }
        
        Arrays.sort(cnt,new Comparator<double[]>(){
            @Override
            public int compare(double[] o1,double[] o2){
                if(o1[2] == 0 || o2[2] == 0 ) return 0;
                if(o1[0] == o2[0]) return Double.compare(o1[2],o2[2]);
                else return Double.compare(o2[0],o1[0]);
                
            }
        });
       
        for(int i=1; i<cnt.length; i++) answer[i-1]=(int)cnt[i][2];
        return answer;
    }
}

/*import java.util.*;

class Solution {
    public int[] solution(int N, int[] stages) {
        
        HashMap <Integer, Integer> map = new HashMap <>();
        for(Integer val : stages) map.put(val, map.getOrDefault(val, 0)+1);
        int[] answer = new int [N];
        double[] answer2 = new double [N];
        
        int count=0;
        int key=0;
        N--;
        
        while(N>0){
            for(Integer val : map.keySet()){
                //System.out.println(val+":"+map.get(val));
                if(val<=N) count=count+map.get(val);
                else count=0;
                
                if(map.containsKey(N)) key=map.get(N);
                else key=0;
            }
            if(count!=0) answer2[N]=key/count;
            else answer2[N]=0;
            
            count=0;
            key=0;
            N--;
        }
        
        //Arrays.sort(answer, Collections.reverseOrder());
        for(Double val : answer2) System.out.println(val);
        
        return answer;
    }
}*/

/*
import java.util.*;

class Solution {
    public int[] solution(int N, int[] stages) {
        String[] answer=new String [N];
        int[] arr=new int[N];
        int count1=0, count2=0;
        
        for(int i=1; i<=N; i++){
            count1=0; count2=1;
            for(int j=0; j<stages.length; j++){
                if(stages[j]==i) count1++;
                if(stages[j]>=i) count2++;
            }
            answer[i]=(float)(count1/count2-1)+" "+i;
        }
        
        System.out.println(answer[0]);
        
        return arr;
    }
}
*/

/*
import java.util.*;

class Solution {
    public int[] solution(int N, int[] stages) {
        String[] answer=new String [N];
        int[] ar=new int[N];
        int count1, count2;
        
        for(int i=0; i<N; i++){
            count1=0; count2=0;
            for(int j=0; j<stages.length; j++){
                if(stages[j]==i+1) count1++;
                if(stages[j]>=i+1) count2++;
            }
            answer[i]=count1+" "+count2+" "+(i+1);
        }
        
        TreeMap <Integer, Double> map = new TreeMap<>();
        for(int i=0; i<answer.length; i++){
            String[] arr=answer[i].split(" ");
            double fail=Double.parseDouble(arr[0])/Double.parseDouble(arr[1]);
            int index=Integer.parseInt(arr[2]);
            map.put(index, fail);
        }
        
        double max=Double.MIN_VALUE;
        int count=map.size()-1;
        for(int data : map.keySet()){
            //max=Math.max(max, map.get(data));
            System.out.println(data+":"+map.get(data));
            //ar[count--]=map.get(data);
            for(int i=0; i<ar.length; i++){
                
            }
        }
        
        return ar;
    }
}
*/


/*
import java.util.*;
import java.util.Map.Entry;

class Solution {
    public int[] solution(int N, int[] stages) {
        String[] string=new String [N];
        int[] arr=new int[N];
        int count1, count2;
        
        for(int i=0; i<N; i++){
            count1=0; count2=0;
            for(int j=0; j<stages.length; j++){
                if(stages[j]==i+1) count1++;
                if(stages[j]>=i+1) count2++;
            }
            string[i]=count1+" "+count2+" "+(i+1);
        }
        
        HashMap <Integer, Double> map = new HashMap<>();
        for(int i=0; i<string.length; i++){
            String[] s=string[i].split(" ");
            double fail=Double.parseDouble(s[0])/Double.parseDouble(s[1]);
            //fail=Double.parseDouble(String.format("%.2f",fail));
            int index=Integer.parseInt(s[2]);
            map.put(index, fail);
        }
        
		ArrayList<Entry<Integer, Double>> list = new ArrayList<Entry<Integer, Double>>(map.entrySet());
		Collections.sort(list, new Comparator<Entry<Integer, Double>>() {
			public int compare(Entry<Integer, Double> o1, Entry<Integer, Double> o2) {
				return o2.getValue().compareTo(o1.getValue());
			}
		});
        
        int count=0;
		for(Entry<Integer, Double> entry : list) {
			//System.out.println(entry.getKey() + " : " + entry.getValue());
            arr[count++]=entry.getKey();
		}
        
        return arr;
    }
}
*/ //70%
