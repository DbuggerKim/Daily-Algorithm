import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

   public static int getBiggestRegion(List<List<Integer>> grid) {
       
        int[][]matrix = new int [grid.size()][grid.get(0).size()];
        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid.get(0).size(); j++){
                matrix[i][j]=grid.get(i).get(j);
            }
        }
       
        int max = 0;
        for(int i=0; i<matrix.length; i++) {
            for(int j=0; j<matrix[0].length; j++) {
                max=Math.max(max, countCells(matrix, i, j));
            }
        }
        
        return max;
        
    }
    
    private static int countCells(int[][] matrix, int i, int j) {
        
        if (i<0 || j<0 || i>=matrix.length || j>=matrix[0].length) return 0;
        if (matrix[i][j]==0) return 0;
        int count=matrix[i][j]--;
        
        //상하좌우
        count += countCells(matrix, i + 1, j);
        count += countCells(matrix, i - 1, j);
        count += countCells(matrix, i, j + 1);
        count += countCells(matrix, i, j - 1);

        //대각선
        count += countCells(matrix, i + 1, j + 1);
        count += countCells(matrix, i - 1, j - 1);
        count += countCells(matrix, i - 1, j + 1);
        count += countCells(matrix, i + 1, j - 1);
        
        return count;
        
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        int m = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> grid = new ArrayList<>();

        IntStream.range(0, n).forEach(i -> {
            try {
                grid.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int res = Result.getBiggestRegion(grid);

        bufferedWriter.write(String.valueOf(res));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

//100%

/*import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static int[][] pos = {{0,1}, {0,-1}, {1,0}, {-1,0}};

    public static void dfs(List<List<Integer>> grid, boolean[][] visit, int x, int y){
        
        if(y+1>=0 && grid.get(x+pos[0][0]).get(y+pos[0][1])==1 &&visit[x][y]==false)
            dfs(grid, visit, x, y+1);
        if(y-1>=0 && grid.get(x+pos[1][0]).get(y+pos[1][1])==1 &&visit[x][y]==false)
            dfs(grid, visit, x, y-1);
        if(x+1>=0 && grid.get(x+pos[2][0]).get(y+pos[2][1])==1 &&visit[x][y]==false)
            dfs(grid, visit, x+1, y);
        if(x-1>=0 && grid.get(x+pos[3][0]).get(y+pos[3][1])==1 &&visit[x][y]==false)
            dfs(grid, visit, x-1, y);
                
        visit[x][y]=true;
        
    }

    public static int maxRegion(List<List<Integer>> grid) {
        
        boolean[][] visit = new boolean [grid.size()][grid.get(0).size()];
        for(int i=0; i<grid.get(0).size(); i++) Arrays.fill(visit[i], false);
        
        int x=0, y=0;
        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid.get(i).size(); j++){
                if(grid.get(x).get(y)==1 &&visit[x][y]==false){
                    dfs(grid, visit, x, y);
                }
            }
        }
        
        return 0;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        int m = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> grid = new ArrayList<>();

        IntStream.range(0, n).forEach(i -> {
            try {
                grid.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int res = Result.maxRegion(grid);

        bufferedWriter.write(String.valueOf(res));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
*/
