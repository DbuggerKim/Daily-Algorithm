import java.util.*;

class Solution {
    public int solution(int[] A) {

        int count=0;
        LinkedList<Integer> list = new LinkedList<Integer>();

        for(int i=1; i<A.length-1; i++){
            if(A[i-1]<A[i] && A[i+1]<A[i]) {
                count++;
                list.add(i);
            }
        }

        int K=2;
        int comp=list.get(0);

        for(int i=1; i<list.size(); i++){
            if(Math.abs(comp-list.get(i))>K) K++;
            comp=list.get(i);
        }

        return K;

    }
}

//20%


import java.util.*;


class Solution {
    public int solution(int[] A) {

        LinkedList<Integer> list = new LinkedList<Integer>();

        for(int i=1; i<A.length-1; i++){
            if(A[i-1]<A[i] && A[i+1]<A[i]) {
                list.add(i);
            }
        }

        //for(int i=0; i<list.size();i++)
        //System.out.print(list.get(i));

        int K=2;
        int comp=list.get(0);

        for(int j=1; j<list.size(); j++){
            if(Math.abs(comp-list.get(j))>=K) K++;
            comp=list.get(j);
        }

        return K-1;

    }
} //20%


import java.util.*;
import java.lang.Math;

class Solution {
    public int solution(int[] A) {

        LinkedList<Integer> list = new LinkedList<Integer>();
        
        for(int i=1; i<A.length-1; i++){
            if(A[i-1]<A[i] && A[i+1]<A[i]) {
                list.add(i);
            }
        }

        /*for(int i=0; i<list.size();i++)
            System.out.print(list.get(i)+" ");*/
        int dist =2;
        int total=0;
        int max=0;
        
        while(dist<=list.size()){
            for(int i=0; i<list.size()-1; i++){
                for(int j=i+1; j<list.size(); j++){
                    if(dist==Math.abs(list.get(i)-list.get(j))) total++;
                }
            }
            if(dist>=total && max<total) max=total;
            dist++;
        }

        return max;

    }
} //13%

//https://coder-in-war.tistory.com/entry/Codility-Lesson10Medium-Flags

import java.util.*;

class Solution {

    public ArrayList<Integer> list;
    public int solution(int[] A) {
        
        list=new ArrayList<>();
        for(int i=1; i<A.length-1; i++) {
            if(A[i-1]<A[i] && A[i]>A[i+1]) {
                list.add(i);
                i++; //한칸 건너뛰기
            }
        }

        int low=0;
        int high=list.size();
        if(high<2) return high;
        int max=0;
        while(low<=high) {
            int mid=(low+high)/2;
            if(check(mid)==mid) {
                low=mid++;
                max=mid;
            }
            else high=mid--;
        }
        return max;
    }

    public int check(int num) {
        int count=1;
        int prev=list.get(0);
        for(int i=1; i<list.size() && count<num; i++) {
            if(list.get(i)-prev>=num) {
                count++;
                prev=list.get(i);
            }
        }
        return count;
    }
}

//TO

//https://velog.io/@minnsane/CodilityPrimeComposite-Peaks-Flags

/*
import java.util.*;

class Solution {

    ArrayList <Integer> list;
    public int solution(int[] A) {

        list=new ArrayList<>();
        for(int i=1; i<A.length-1; i++) {
            if(A[i-1]<A[i] && A[i]>A[i+1]) {
                list.add(i);
                i++;
            }
        }

        int flag=list.size();
        HashSet<String> set=new Hashset<>();
        for(int i=0; i<list.size(); i++) {
            int prev=list.get(i);
            for(int j=1; j<list.size()-1; j++) {
                int next=list.get(j);
                //if(prev-temp>=flag) continue;
                //else set.add(prev+" "+temp);
            }
        }

        return list.size();
    }
}
*/

//https://www.youtube.com/watch?v=1aZGIdbPN-4

import java.util.*;

class Solution {

    public int solution(int[] A) {

        ArrayList <Integer> list=new ArrayList<>();
        for(int i=1; i<A.length-1; i++) {
            if(A[i-1]<A[i] && A[i]>A[i+1]) {
                list.add(i);
            }
        } if(list.size()<2) return list.size();

        int flag=(int)Math.ceil(Math.sqrt(list.get(list.size()-1)-list.get(0)));
        for(int i=flag; i>=2; i--) {
            int startindex=0;
            int endindex=list.size()-1;
            int startflag=list.get(startindex);
            int endflag=list.get(endindex);
            int fix=2;
            while(startindex<endindex) {
                startindex++;
                endindex--;
                if(list.get(startindex)>=startflag+i) {
                    if(list.get(startindex)<=endflag-i) {
                        fix++;
                        startflag=list.get(startindex);
                    }
                }
                if(list.get(endindex)>=startflag+i) {
                    if(list.get(endindex)<=endflag-i) {
                        fix++;
                        endflag=list.get(endindex);
                    }
                }
                if(fix==i) return i;
            }
        }
        
        return 0; //flag가 2보다 작으면 전체 산맥 관련 값이 안나오는것임
    }
}
//100%
