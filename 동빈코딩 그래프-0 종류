#서로소집합_easy

def find_parent(parent,x):
  if parent[x]!=x:
    return find_parent(parent,parent[x])
  return x #

def union_parent(parent,a,b):
  a=find_parent(parent,a)
  b=find_parent(parent,b)
  if a<b:
    parent[b]=a
  else: #a>=b 보다 적은 값을 부모값으로 함
    parent[a]=b

v,e=map(int, input().split())
parent=[0]*(v+1)

for i in range(1,v+1):
  parent[i]=i

for i in range(e):
  a,b=map(int,input().split())
  union_parent(parent,a,b)

print('각 원소가 속한 집합: ',end='')
for i in range(1,v+1):
  print(find_parent(parent,i),end='')
print()
print('부모 테이블: ',end='')
for i in range(1,v+1):
  print(parent[i],end='')
  
#서로소집합_hard

def find_parent(parent,x):
  if parent[x]!=x:
    return find_parent(parent,parent[x])
  return parent[x] #

def union_parent(parent,a,b):
  a=find_parent(parent,a)
  b=find_parent(parent,b)
  if a<b:
    parent[b]=a
  else: #a>=b 보다 적은 값을 부모값으로 함
    parent[a]=b

v,e=map(int, input().split())
parent=[0]*(v+1)

for i in range(1,v+1):
  parent[i]=i

for i in range(e):
  a,b=map(int,input().split())
  union_parent(parent,a,b)

print('각 원소가 속한 집합: ',end='')
for i in range(1,v+1):
  print(find_parent(parent,i),end='')
print()
print('부모 테이블: ',end='')
for i in range(1,v+1):
  print(parent[i],end='')
  
#서로소집합_싸이클판별

def find_parent(parent,x):
  if parent[x]!=x:
    return find_parent(parent,parent[x])
  return parent[x]

def union_parent(parent,a,b):
  a=find_parent(parent,a)
  b=find_parent(parent,b)
  if a<b:
    parent[b]=a
  else: #a>=b 보다 적은 값을 부모값으로 함
    parent[a]=b

v,e=map(int, input().split())
parent=[0]*(v+1)

for i in range(1,v+1):
  parent[i]=i

cycle=False

for i in range(e):
  a,b=map(int,input().split())
  if find_parent(parent,a)==find_parent(parent,b): #각 노드의 루트 같음
    cycle=True
    break
  else:
    union_parent(parent,a,b)

if cycle:
  print("사이클이 발생했습니다.")
else:
  print("사이클이 발생하지 않았습니다.")


#크루스칼_MST

def find_parent(parent,x):
  if parent[x]!=x:
    parent[x]=find_parent(parent,parent[x])
  return parent[x]

def union_parent(parent,a,b):
  a=find_parent(parent,a)
  b=find_parent(parent,b)
  if a<b:
    parent[b]=a
  else:
    parent[a]=b

v,e=map(int,input().split())
parent=[0]*(v+1)

for i in range(1,v+1):
  parent[i]=i

edges=[]
result=0

for _ in range(e):
  a,b,cost=map(int,input().split())
  edges.append((cost,a,b))

edges.sort()

for edge in edges:
  cost,a,b=edge
  if find_parent(parent,a)!=find_parent(parent,b):
    union_parent(parent,a,b)
    result+=cost

print(result)

#위상정렬

from collections import deque

v, e = map(int, input().split())
indegree = [0] * (v + 1)
graph = [[] for i in range(v + 1)]

for _ in range(e):
    a, b = map(int, input().split())
    graph[a].append(b)
    indegree[b] += 1


def topology_sort():
    result = []
    q = deque()

    #처음 시작할 때는 진입차수가 0인 노드를 큐에 삽입
    for i in range(1, v + 1):
        if indegree[i] == 0:
            q.append(i)

    while q:
        now = q.popleft()
        result.append(now)
        #해당 원소와 연결된 노드들의 진입차수에서 1빼기
        for i in graph[now]:
            indegree[i] -= 1
            #새롭게 진입차수가 0이 되는 노드를 큐에 삽입
            if indegree[i] == 0:
                q.append(i)

    for i in result:
        print(i, end='')


topology_sort()
