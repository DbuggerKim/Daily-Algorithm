import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    static boolean[] visited;
    public static long roadsAndLibraries(int n, int clib, int croad, List<List<Integer>> city) {
        long cost=0;
        visited = new boolean[n+1];
        
        int[][] cities=new int[city.size()][2];
        for(int i=0; i<cities.length; i++) {
            for(int j=0; j<cities[i].length; j++) {
                cities[i][j]=city.get(i).get(j);
            }
        }
        
        HashMap<Integer, ArrayList<Integer>> graph=new HashMap<>();
        for(int i=1; i<n+1; i++) graph.put(i, new ArrayList<Integer>());
        for(int i=0; i<cities.length; i++) {
            graph.get(cities[i][0]).add(cities[i][1]);
            graph.get(cities[i][1]).add(cities[i][0]);
        } 
        
        ArrayList<Long> list=new ArrayList<>();
        for(int i=1; i<=n; ++i) if(!visited[i]) list.add(dfs(i, graph));
        
        for(int i=0; i<list.size(); i++) {
            cost+=(long)Math.min(((list.get(i)-1)*croad)+clib, list.get(i)*clib);
        } 
        
        return cost;
    }

    public static long dfs(int cur, HashMap<Integer, ArrayList<Integer>> graph) {
        long count=1;
        visited[cur]=true;
        for(int i : graph.get(cur)) if(!visited[i]) count+=dfs(i, graph);
        return count;
    }
    
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                int n = Integer.parseInt(firstMultipleInput[0]);

                int m = Integer.parseInt(firstMultipleInput[1]);

                int c_lib = Integer.parseInt(firstMultipleInput[2]);

                int c_road = Integer.parseInt(firstMultipleInput[3]);

                List<List<Integer>> cities = new ArrayList<>();

                IntStream.range(0, m).forEach(i -> {
                    try {
                        cities.add(
                            Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                                .map(Integer::parseInt)
                                .collect(toList())
                        );
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                });

                long result = Result.roadsAndLibraries(n, c_lib, c_road, cities);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
