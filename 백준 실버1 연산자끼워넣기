/* //redo
/*
 출처: https://www.acmicpc.net/problem/14888
 제목: 연산자 끼워넣기 (실버1)
 */

package sample;
import java.util.*;

public class Main {
	
	public static int[] exp;
	public static boolean[] visit;
	public static int big=Integer.MIN_VALUE;
	public static int small=Integer.MAX_VALUE;
	
	public static void dfs(int sum, int count, int N, int[] A) {
		if(count==N) {
			big=Math.max(big,sum);
			small=Math.min(small,sum);
			return;
		}
		for(int i=1; i<N; i++) {
			if(visit[i]==false) {
				if(exp[0]>0) {
					exp[0]--;
					visit[i]=true;
					sum+=A[i];
					dfs(sum,count+1,N,A);
					visit[i]=false;
					sum-=A[i];
				}
				if(exp[1]>0) {
					exp[1]--;
					visit[i]=true;
					sum-=A[i];
					dfs(sum,count+1,N,A);
					visit[i]=false;
					sum+=A[i];
				}
				if(exp[2]>0) {
					exp[2]--;
					visit[i]=true;
					sum*=A[i];
					dfs(sum,count+1,N,A);
					visit[i]=false;
					sum/=A[i];
				}
				if(exp[3]>0) {
					exp[3]--;
					visit[i]=true;
					sum/=A[i];
					dfs(sum,count+1,N,A);
					visit[i]=false;
					sum*=A[i];
				}
			}
		}
	}
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int[] A = new int[N];
		exp = new int[4]; //덧셈, 뺼샘, 곱셈, 나눗셈
		visit = new boolean[A.length];
		
		for(int i=0; i<N; i++) A[i]=sc.nextInt();
		for(int i=0; i<4; i++) exp[i]=sc.nextInt();
		
		visit[0]=true;
		dfs(A[0],0,N,A);
		System.out.println(big);
		System.out.println(small);
        sc.close();
        
	}
}
*/


/*
package sample;
import java.util.*;

public class Main {
	
	public static int[] exp;
	public static boolean[] visit;
	public static ArrayList<Integer> list;
	
	public static void dfs(String out, int count, int N) {
		if(count==N-1) {
			System.out.println(out);
			//계산
			//int out=0;
			//list.add(out);
			return;
		}
		for(int i=0; i<exp.length; i++) {
			if(visit[i]==false) {
				visit[i]=true;
				if(exp[i]>0) {
					exp[i]--;
					if(i==0) dfs(out+"+",count+1,N);
					if(i==1) dfs(out+"-",count+1,N);
					if(i==2) dfs(out+"*",count+1,N);
					if(i==3) dfs(out+"/",count+1,N);
					exp[i]++;
				}
				visit[i]=false;
			}
		}
	}
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int[] A = new int[N];
		exp = new int[4]; //덧셈, 뺼샘, 곱셈, 나눗셈
		visit = new boolean[N-1];
		list= new ArrayList<>();
		
		for(int i=0; i<N; i++) A[i]=sc.nextInt();
		for(int i=0; i<4; i++) exp[i]=sc.nextInt();
		
		//dfs(Integer.toString(A[0]),0,N,A);
		//Collections.sort(list);
		//System.out.println(list.get(0));
		//System.out.println(list.get(list.size()-1));
        sc.close();
        
	}
}
*/


/*
 출처: https://www.acmicpc.net/problem/14888
 제목: 연산자 끼워넣기 (실버1)

식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.
//이 문항을 못봐서 삽질.. 코테를 풀땐 글을 제대로 읽자 제발

 */
package sample;
import java.util.*;

public class Main {
	
	public static int[] exp;
	public static int big=Integer.MIN_VALUE;
	public static int small=Integer.MAX_VALUE;
	
	public static void dfs(int sum, int index, int N, int[] A) {
		if(index==N) {
			big=Math.max(big,sum);
			small=Math.min(small,sum);
			return;
		}
		for(int i=0; i<exp.length; i++) {
			if(exp[i]>0) {
				exp[i]--;
				if(i==0) dfs(sum+A[index],index+1,N,A);
				if(i==1) dfs(sum-A[index],index+1,N,A);
				if(i==2) dfs(sum*A[index],index+1,N,A);
				if(i==3) dfs(sum/A[index],index+1,N,A);
				exp[i]++;
			}
		}
	}
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int[] A = new int[N];
		exp = new int[4]; //덧셈, 뺼샘, 곱셈, 나눗셈
		
		for(int i=0; i<N; i++) A[i]=sc.nextInt();
		for(int i=0; i<4; i++) exp[i]=sc.nextInt();
		
		dfs(A[0],1,N,A);
		System.out.println(big);
		System.out.println(small);
        sc.close();
        
	}
}
