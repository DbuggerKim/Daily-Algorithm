//https://tmdrl5779.tistory.com/216

import java.util.*;

class Solution {
    
    public int solution(int[][] maps) {
        int answer = 0;
        int[][] visited = new int[maps.length][maps[0].length];
        for(int i=0; i<visited.length; i++) Arrays.fill(visited[i], 0);
        
        bfs(maps, visited);
        answer=visited[maps.length-1][maps[0].length-1];
        if(answer==0) answer = -1;
        
        return answer;
    }
    
    public void bfs(int[][] maps, int[][] visited){
        
        //우 위 좌 아래
        int[] dx = {1, 0, -1, 0}; 
        int[] dy = {0, 1, 0, -1};
        
        int x = 0;
        int y = 0;
        visited[x][y] = 1;
        Queue<int[]> queue = new LinkedList<>(); //queue 배열 삽입
        queue.add(new int[]{x, y});
        
        while(!queue.isEmpty()){
            
            int[] current = queue.remove(); //pop() 말고 remove() : null값출력
            int cX = current[0];
            int cY = current[1];
            
            for(int i = 0; i < 4; i++){ //우 위 좌 아래 탐색
                int nX=cX+dx[i];
                int nY=cY+dy[i];
                
                if(nX < 0 || nX > maps.length-1 || nY < 0 || nY > maps[0].length-1) continue; //좌표 넘어가면 연산 안함
                
                if(visited[nX][nY]==0 && maps[nX][nY]==1){
                    visited[nX][nY]=visited[cX][cY]+1;
                    queue.add(new int[]{nX, nY});
                }
            }
        }
    }
} //100%

/*
//BFS

import java.util.*;

class Solution {
    
    public int solution(int[][] maps) {
        
        int answer=0;
        int[][] visit = {};
        Queue <Integer> queueX = new LinkedList <>();
        Queue <Integer> queueY = new LinkedList <>();
        queueX.add(0); queueY.add(0);
        int[] arrX={-1, 0, 1, 0}; int[] arrY={0, 1, 0, -1};
        
        while(!queueX.isEmpty() && !queueY.isEmpty()){
            int row=queueX.poll();
            int col=queueY.poll();
            
            for(int i=0; i<4; i++){
                int x=row+arrX[i];
                int y=col+arrY[i];

                if(maps[x][y]==1){
                    queueX.add(x);
                    queueY.add(y);
                    visit[x][y]=visit[row][col]+1;
                }
            }
        }
                   
        //answer=visit[visit.length-1][visit.length-1];
        
        return answer;
    }
}
*/


/*
import java.util.*;

class Solution {
    
    public int solution(int[][] maps) {
        
        int answer=0;
        
        boolean[][] visited = new boolean [maps.length][maps[0].length];
        for(int i=0; i<visited.length; i++) Arrays.fill(visited[i], false);
        
        for(int i=0; i<maps.length; i++){
            for(int j=0; j<maps[0].length; j++){
                if(maps[i][j]==1 && visited[i][j]==false){
                    visited[i][j]=true;
                    answer++;
                }
            }
        }
        
        return answer;
    }
}
*/


/*
class Solution {
    
    int answer=0;
    
    public void dfs(int vertex, int[][] maps, boolean[] visited){
        visited[vertex]=true;
        for(int i=0; i<5; i++){
            if(maps[vertex][i]==1 && visited[vertex+i]==false){
                dfs(vertex+i, maps, visited);
                answer++;
            }
        }
    }
    
    public int solution(int[][] maps) {
        
        int n=maps.length;
        int m=maps[0].length;
        boolean[] visited = new boolean [n*m];
        
        if(maps[n-1][m-2]==1 && maps[n-2][m-2]==1 && maps[n-2][m-1]==1) return -1;
        
        dfs(0, maps, visited);
        
        return answer;
    }
}

*/
