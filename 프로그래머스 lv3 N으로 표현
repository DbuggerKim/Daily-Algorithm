class Solution {
    
    private int n;
    private int target;
    private int answer = Integer.MAX_VALUE;

    public int solution(int N, int number) {
        n = N;
        target = number;
        dfs(0, 0);        
        return answer == Integer.MAX_VALUE ? -1 : answer;
    }

    private void dfs(int count, int prev) {
        if (count > 8) {
            answer = -1;
            return;
        }

        if (prev == target) {
            answer = Math.min(answer, count);
            return;
        }

        int tempN = n;
        for (int i = 0; i < 8 - count; i++) {
            int newCount = count + i + 1;
            dfs(newCount, prev + tempN);
            dfs(newCount, prev - tempN);
            dfs(newCount, prev / tempN);
            dfs(newCount, prev * tempN);

            tempN = tempN * 10 + n;
        }
    }
} //100%

class Solution {
    
    private int answer=Integer.MAX_VALUE;

    private void dfs(int count, int prev, int N, int number) {
        if(count>8){ //개수 오버
            answer=-1;
            return;
        }

        if(prev==number){ //최솟값 찾기
            answer=Math.min(answer, count);
            return;
        }

        int temp=N; //5
        for(int i=1; i<9-count; i++){
            dfs(count+i, prev+temp, N, number);
            dfs(count+i, prev-temp, N, number);
            dfs(count+i, prev/temp, N, number);
            dfs(count+i, prev*temp, N, number);
            temp=temp*10+N;//55, 555, 5555..
        }
    }
    
    public int solution(int N, int number) {
        dfs(0, 0, N, number);        
        return answer==Integer.MAX_VALUE ? -1:answer; //아무 수행 안될 때
    }
} //100%
