#다익스트라_easy

import sys
input = sys.stdin.readline
INF = int(1e9)

n, m = map(int, input().split())  #노드개수, 간선개수
start = int(input())  #시작노드
graph = [[] for i in range(n+1)]  #방문 체크
visited = [False]*(n+1)  #방문한 노드
distance = [INF]*(n+1)  #최단거리 테이블 설정

for _ in range(m):
    a, b, c = map(int,input().split())  #a노드에서 b노드로 비용c
    graph[a].append((b,c))

def get_smallest_node():
  min_value=INF
  index=0
  for i in range(1,n+1):
    if distance[i]<min_value and not visited[i]:
      min_value=distance[i]
      index=i
  return index

def dijkstra(start):
  distance[start]=0
  visited[start]=True
  for j in graph[True]:
    distance[j[0]]=j[1]
  for i in range(n-1):
    now=get_smallest_node()
    visited[now]=True
    for j in graph[now]:
      cost=distance[now]+j[1]
      if cost<distance[j[0]]:
        distance[j[0]]=cost

dijkstra(start)

for i in range(1,n+1):
  if distance[i]==INF:
    print("INFINITY")
  else:
    print(distance[i])

#다익스트라_hard

import heapq

import sys
input = sys.stdin.readline
INF = int(1e9)

n, m = map(int, input().split())  #노드개수, 간선개수
start = int(input())  #시작노드
graph = [[] for i in range(n+1)]  #방문 체크
distance = [INF]*(n+1)  #최단거리 테이블 설정

for _ in range(m):
    a, b, c = map(int,input().split())  #a노드에서 b노드로 비용c
    graph[a].append((b,c))

def dijkstra(start):
  q=[]
  heapq.heappush(q,(0,start))
  distance[start]=0
  while q:
    dist,now=heapq.heappop(q)
    if distance[now]<dist:
      continue
    for i in graph[now]:
      cost=dist+i[1]
      if cost<distance[i[0]]:
        distance[i[0]]=cost
        heapq.heappush(q,(cost,i[0]))

dijkstra(start)

for i in range(1,n+1):
  if distance[i]==INF:
    print("INFINITY")
  else:
    print(distance[i])

#플로이드

INF=int(1e9)

n=int(input())
m=int(input())

graph=[[INF]*(n+1) for _ in range(n+1)]

for _ in range(m):
  a,b,c=map(int,input().split())
  graph[a][b]=c

for a in range(1,n+1):
  for b in range(1,n+1):
    if a==b:
      graph[a][b]=0

for k in range(1,n+1):
  for a in range(1,n+1):
    for b in range(1,n+1):
      graph[a][b]=min(graph[a][b],graph[a][k]+graph[k][b])

for a in range(1,n+1):
  for b in range(1,n+1):
    if graph[a][b]==INF:
      print("INFINITY",end=' ')
    else:
      print(graph[a][b],end=' ')
  print()

