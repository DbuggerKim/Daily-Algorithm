//https://velog.io/@gkak1121/프로그래머스-공-이동-시뮬레이션


class Solution {
    public long solution(int n, int m, int x, int y, int[][] queries) { 
        
        long answer = 0;
        int size = queries.length;
        long row_start = x, row_end = x;
        long col_start = y, col_end = y;
        
        for(int i=size - 1; i >= 0; i--) {
            int dir = queries[i][0];
            int dist = queries[i][1];

            if(dir == 0) { // 열 다시 증가시킴
                if(col_start != 0) 
                    col_start = col_start + dist;

                col_end = col_end + dist;
                if(col_end > m - 1) 
                    col_end = m - 1; 

            } else if(dir == 1){ // 열 다시 감소시킴
                col_start = col_start - dist;    
                if(col_start < 0) 
                    col_start = 0;

                if(col_end != m - 1) 
                    col_end = col_end - dist;

            } else if(dir == 2) { // 행 다시 증가시킴
                if(row_start != 0) 
                    row_start = row_start + dist;

                row_end = row_end + dist;
                if(row_end > n - 1) 
                    row_end = n - 1;

            } else if(dir == 3) { // 행 다시 감소시킴
                row_start = row_start - dist;    
                if(row_start < 0) 
                    row_start = 0;

                if(row_end != n - 1) 
                    row_end = row_end - dist;

            }
            if(row_start > n - 1 || row_end < 0 || col_start > m - 1 || col_end < 0) 
                return answer;
        }
        answer = (row_end - row_start + 1) * (col_end - col_start + 1);

        return answer;
    
    }
}

class Solution {
    public long solution(int n, int m, int x, int y, int[][] queries) {

        //시작(0,0) 끝(0,0)
        long answer = 0;
        long rowStart = x, rowEnd = x;
        long colStart = y, colEnd = y;
        
        for(int i=queries.length-1; i>=0; i--) {
            int dir = queries[i][0];
            int dist = queries[i][1];
            switch(dir){
                case 0 :
                        if(colStart!=0) colStart=colStart+dist;
                        colEnd=colEnd+dist;
                        if(colEnd>m-1) colEnd=m-1;
                case 1 :
                        colStart=colStart-dist;    
                        if(colStart<0) colStart=0;
                        if(colEnd!=m-1) colEnd=colEnd-dist;
                case 2 :
                        if(rowStart!=0) rowStart=rowStart+dist;
                        rowEnd=row_end+dist;
                        if(rowEnd>n-1) rowEnd=n-1;
                case 3 : 
                        rowStart=rowStart-dist;    
                        if(rowStart<0) rowStart=0;
                        if(rowEnd!=n-1) rowEnd=rowEnd-dist;
                }
            }
            if(rowStart>n-1||rowEnd<0||colStart>m-1||colEnd<0) return answer;
        }
    
        return (rowEnd-rowStart+1)*(colEnd-colStart+1);
    
    }
}


/*//시작(0,0) 끝(0,0)
class Solution {
    public long solution(int n, int m, int x, int y, int[][] queries) {
        long answer = 0;
        long rowStart=x, rowEnd=x;
        long colStart=y, colEnd=y;
        
        for(int i=queries.length-1; i>=0; i--){
            int a = queries[i][0];
            int b = queries[i][1];
            switch(a){
                case 0 : 
                        if(colStart!=0) colStart+=b;
                        colEnd+=b;
                        if(colEnd>m-1) colEnd=m-1;
                case 1 :
                        colStart-=b;
                        if(colStart<0) colStart=0;
                        if(colEnd!=m-1) colEnd-=b;
                case 2 : 
                        if(rowStart!=0) rowStart+=b;
                        rowEnd+=b;
                        if(rowEnd>n-1) rowEnd=n-1;
                case 3 : 
                        rowStart-=b;
                        if(rowStart<0) rowStart=0;
                        if(rowEnd!=n-1) rowEnd-=b;
            }
            if(rowStart>n-1 || rowEnd<0 || colStart>m-1 || colEnd<0) return answer;
        }
        
        answer=(rowEnd-rowStart+1)*(colEnd-colStart+1);
        
        return answer;
    }
}*/ 5%


class Solution {
    public long solution(int n, int m, int x, int y, int[][] queries) { 
        int size=queries.length;
        long answer=0;
        long row_start=x; 
        long row_end=x;
        long col_start=y;
        long col_end=y;
        
        for(int i=size-1; i>=0; i--) {
            int dir = queries[i][0];//공 이동 방향
            int dist = queries[i][1];// 공 움직임 크기
            if(dir==0) { // 열 다시 증가시킴
                if(col_start!=0) col_start=col_start+dist;
                col_end=col_end+dist;
                if(col_end>m-1) col_end=m-1; 
            } else if(dir==1){ // 열 다시 감소시킴
                col_start=col_start-dist;    
                if(col_start<0) col_start=0;
                if(col_end!=m-1) col_end=col_end-dist;
            } else if(dir==2) { // 행 다시 증가시킴
                if(row_start!=0) row_start=row_start+dist;
                row_end=row_end+dist;
                if(row_end>n-1) row_end=n-1;
            } else if(dir==3) { // 행 다시 감소시킴
                row_start=row_start-dist;    
                if(row_start<0) row_start=0;
                if(row_end!=n-1) row_end=row_end-dist;
            }
            if(row_start>n-1||row_end<0||col_start>m-1||col_end<0) return answer;
        }
        answer=(row_end-row_start+1)*(col_end-col_start+1);
        return answer;
    }
} //100%

class Solution {
    public long solution(int n, int m, int x, int y, int[][] queries) {
        long answer=0;
        long rowStart=x;
        long rowEnd=x;
        long colStart=y;
        long colEnd=y;
        for(int i=queries.length-1; i>=0; i--) {
            int dir=queries[i][0];
            int dist=queries[i][1];
            
            if(dir==0){
                if(colStart!=0) colStart+=dist;
                colEnd+=dist;
                if(colEnd>m-1) colEnd=m-1;
            } else if(dir==1) {
                colStart-=dist;
                if(colStart<0) colStart=0;
                if(colEnd!=m-1) colEnd-=dist;
            } else if(dir==2) {
                if(rowStart!=0) rowStart+=dist;
                rowEnd+=dist;
                if(rowEnd>n-1) rowEnd=n-1;
            } else if(dir==3) {
                rowStart-=dist;
                if(rowStart<0) rowStart=0;
                if(rowEnd!=n-1) rowEnd-=dist;
            }
            
            if(rowStart>n-1 || rowEnd<0 || colStart>m-1 || colEnd<0) return answer;
        } 
        answer=(rowEnd-rowStart+1)*(colEnd-colStart+1);
        return answer;
    }
} //100%
