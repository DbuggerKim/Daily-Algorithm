//https://sungjun221.github.io/algorithm/Candies/

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;
import java.lang.*;

class Result {
    
    public static long candies(int n, List<Integer> list){
        
        long sum=0;
        int[] Udp = new int[n];
        int[] Ddp = new int[n];
        
        Udp[0]=1;
        Ddp[n-1]=1;
        
        for(int i=1; i<n; i++){
                Udp[i] = (list.get(i-1) < list.get(i)) ? (Udp[i-1] + 1) : 1;
            }

            for(int i=n-2; i>=0; i--){
                int t = (list.get(i+1) < list.get(i)) ? (Ddp[i+1] + 1) : 1;
                Ddp[i] = Math.max(Ddp[i], t);
            }
            
            for(int i=0; i<n; i++) {
                sum += Math.max(Udp[i], Ddp[i]);
            }
            
        return sum;
        
    }
    
    /*
        def candies(n, arr):
        
        candies = [1] * len(arr)
        # left -> right
        for i in range(len(arr)-1):
            if arr[i] < arr[i+1]:
                candies[i+1] = max(candies[i+1], candies[i] + 1)
        # right -> left
        for i in reversed(range(1, len(arr))):
            if arr[i] < arr[i-1]:
                candies[i-1] = max(candies[i-1], candies[i] + 1)
        return sum(candies)
    */

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        long result = Result.candies(n, arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

//100%

/*
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    public static long candies(int n, List<Integer> list) {
    // Write your code here
        long total=0;
        int[] arr= new int [n];
        Arrays.fill(arr, 1);
        
        for(int i=1; i<list.size(); i++){
            if(list.get(i-1)<list.get(i)) arr[i]+=arr[i-1];
            if(list.get(i)<list.get(i-1) && arr[i]<arr[i-1]) arr[i-1]+=arr[i];
        }
        
        for(Integer val : arr) total+=val;
        
        return total;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        long result = Result.candies(n, arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

*/
