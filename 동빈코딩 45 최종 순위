from collections import deque

#테스트 케이스만큼 반복
for tc in range(int(input())):
  #노드 개수 입력
  n=int(input())
  #모든 노드에 대한 진입차수는 0으로 초기화
  indegree=[0]*(n+1)
  #각 노드에 연결된 간선 정보를 담기 위한 인접 행렬 초기화
  graph=[[False]*(n+1) for i in range(n+1)]
  #작년 순위 정보 입력
  data=list(map(int,input().split()))
  #방향 그래프의 간선 정보 초기화
  for i in range(n):
    for j in range(i+1,n):
      graph[data[i]][data[j]]=True
      indegree[data[j]]+=1

  #올해 변경된 순위 정보 입력
  m=int(input())
  for i in range(m):
    a,b=map(int,input().split())
    if graph[a][b]:
      graph[a][b]=False
      graph[b][a]=True
      indegree[a]+=1
      indegree[b]-=1
    else:
      graph[a][b]=True
      graph[b][a]=False
      indegree[a]-=1
      indegree[b]+=1

  #처음 시작할때는 진입차수가 0인 노드를 큐에 삽입
  q=deque()
  for i in range(1,n+1):
    if indegree[i]==0: 
      q.append(i)

  result=[]
  certain=True #위상정렬 결과가 오직 하나인지 여부
  cycle=False #그래프 내 사이크링 존재하는지 여부

  for i in range(n):
    if len(q)==0: #사이클 발생했다는 의미
      cycle=True
      break
    if len(q)>2: #가능한 정렬 결과가 여러개리는 의미
      certain=False
      break
    now=q.popleft()
    result.append(now)
    for j in range(1,n+1):
      if graph[now][j]:
        indegree[j]-=1
        if indegree[j]==0:
          q.append(j)

  if cycle: print("IMPOSSIBLE")
  elif not certain: print("?")
  else: 
    for i in result:
      print(i,end=" ")
    print()
