//https://www.youtube.com/watch?v=B1CjIauForM
//함정 두번째 방문하면 방향 반전됨
//우선순위큐를 활용한 다익스트라

import java.util.*;

class Solution {
    public int max = Integer.MAX_VALUE;
    public int[][] graph = new int [1001][1001]; //n 최대 1000개
    
    public int dijstra(int n, int src, int dst, int[] traps){
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->a[0]-b[0]);
        boolean[][] visited = new boolean[1001][1<<10]; //함정 최대 10개
        pq.add(new int[]{0, src, 0});
        
        while(!pq.isEmpty()){
            int[] curr=pq.poll();
            int w = curr[0];
            int u = curr[1];
            int state = curr[2];
            
            if(u == dst) return w;
            if(visited[u][state]) continue;
            visited[u][state]=true;
            
            boolean currTrapped = false;
            HashMap<Integer, Boolean> trapped = new HashMap<>();
            for(int i=0; i<traps.length; i++){
                int bit = 1<<i;
                if((state&bit)!=0){
                    if(traps[i]==u){
                        state &= ~bit;
                    }else{
                        trapped.put(traps[i], true);
                    }
                } else {
                    if(traps[i]==u){
                        state |= bit;
                        trapped.put(traps[i], true);
                        currTrapped = true;
                    }
                }
            }
            for(int v=1; v<=n; v++){
                if(v==u) continue;
                boolean nextTrapped = trapped.containsKey(v) ? true : false;
                if(currTrapped==nextTrapped){
                    if(graph[u][v]!=max) pq.add(new int[]{w+graph[u][v], v, state});
                }
                else{
                    if(graph[v][u]!=max) pq.add(new int[]{w+graph[v][u], v, state});
                }
            }
        }
        return max;
    }
    
    public int solution(int n, int start, int end, int[][] roads, int[] traps) {
        
        for(int i=1; i<=n; i++){
            for(int j=1; j<=n; j++){
                if(i==j) graph[i][j]=0;
                else graph[i][j]=max;
            }
        }
        
        for(int[] data : roads){
            int u=data[0], v=data[1], w=data[2];
            if(w<graph[u][v]) graph[u][v]=w;
        }
        
        return dijstra(n, start, end, traps);
    }
}//100%
