import java.io.*;
import java.util.HashSet;
import java.util.Set;

class Solution {
    static String origin;
    static boolean[] visited = new boolean[7];
    static Set<Integer> set = new HashSet<>();
    
    public int solution(String numbers) {
        origin = numbers;
        dfs("", 0);
        return set.size();
    }
    
    public static boolean isPrime(int n) {
        if(n<=1) return false;
        for(int i=2; i*i<=n; i++){
            if(n%i==0) return false;
        }
        return true;
    }

    public static void dfs(String str, int cnt){
        if(cnt==origin.length()) {//
            if(!str.equals("") && isPrime(Integer.parseInt(str))){
                set.add(Integer.parseInt(str));
            }
        }

        for(int i=0; i<origin.length(); i++){
            if(visited[i]) continue;//
            visited[i] = true;
            dfs(str+origin.charAt(i), cnt+1);
            dfs(str, cnt+1);
            visited[i] = false;
        }
    }
} //100%




/*import java.util.*;
class Solution {
    public int solution(String numbers) {
        
        int answer = 0;
        int [] num = new int [numbers.length()];

        for(int i=0; i<numbers.length(); i++){
            char c=numbers.charAt(i);
            num[i]=Character.getNumericValue(c);
        }
        
        Arrays.sort(num);
        
        for(Integer n : num){
            if(isPrime(n)==true) answer++;
            //else continue;
        }

        return answer;
    }
    
    public boolean isPrime(int k){
        boolean answer=true;
        if(k<2){
            answer=false;
            return answer;
        }
        for(int i=2; i<k; k++){
            if(k%i==0){
                answer=false;
                break;
            }
        }
        return answer;
    }
    
}*/

import java.util.*;
import java.lang.*;

class Solution {
    
    String sub="";
    boolean[] visit=new boolean[7];
    HashSet<Integer> set = new HashSet<>();
    
    public boolean isPrime(int num) {
        if(num<2) return false;
        for(int i=2; i<=Math.sqrt(num); i++) {
            if(num%i==0) return false;
        }
        return true;
    }
    
    public void dfs(int count, String val) {
        if(count==sub.length()){
            if(!val.equals("") && isPrime(Integer.parseInt(val))){
                set.add(Integer.parseInt(val));
            }
        }
        
        for(int i=0; i<sub.length(); i++) {
            if(visit[i]) continue;
            visit[i]=true;
            dfs(count+1, val);
            dfs(count+1, val+sub.charAt(i));
            visit[i]=false;
        }
    }
    
    public int solution(String numbers) {
        sub=numbers;
        dfs(0,"");
        return set.size();
    }
} //100%


import java.util.*;
import java.lang.*;

class Solution {
    
    String output="";
    HashSet<Integer> set;
    boolean[] visit;
    
    public int solution(String numbers) {
        output=numbers;
        set=new HashSet<>();
        visit=new boolean[numbers.length()];
        dfs(0,"");
        return set.size();
    }
    
    public void dfs(int count, String val) {
        if(count==output.length()) { 
            if(!val.equals("") && isPrime(Integer.parseInt(val))) {
                set.add(Integer.parseInt(val));
            }
            return;
        }
        for(int i=0; i<output.length(); i++) {
            if(visit[i]==true) continue;//
            visit[i]=true;
            dfs(count+1, val);
            dfs(count+1, val+output.charAt(i));
            visit[i]=false;
        }
    }
    
    public boolean isPrime(int num) {
        if(num<2) return false;
        for(int i=2; i<=Math.sqrt(num); i++) {
            if(num%i==0) return false;
        } return true;
    }
} //100%
