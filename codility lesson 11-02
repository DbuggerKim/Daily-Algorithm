import java.util.*;

class Solution {
    public int[] solution(int N, int[] P, int[] Q) {

        int [] arr = new int [P.length];

        for(int i=0; i<P.length; i++){
            for(int j=P[i]; j<=Q[i]; j++){
                for(int k=1; k<j; j++){
                    if(j%k==0 && isPrime(k) && isPrime(j/k)){
                        arr[i]=j;
                    }
                }
            }
        }

        return arr;
    }

    public boolean isPrime(int a){ //a는 양의 정수
        boolean check=true;
        for(int i=1; i<a; i++)
            if(a!=1 && a%i==0) check=false;
        return check;
    }
}

//testcase TO

import java.util.*;

class Solution {
    public int[] solution(int N, int[] P, int[] Q) {
        
        LinkedList<Integer> list = new LinkedList <Integer>();
        HashMap<Integer,Integer> map = new HashMap <Integer,Integer>();
        int count=0;
        int [] arr= new int[P.length];

        int n=N/=2;
        while(n>1){
            if(isPrime(n)) list.add(n);
            n--;
        }

        for(int i=0 ; i<list.size(); i++)
            System.out.println("answer:" + list.get(i));
        
        System.out.println(list.size());

        for(int i=0; i<list.size(); i++){
            for(int j=0; j<list.size(); j++){
                int a=list.get(i); 
                int b=list.get(j);
                System.out.print(a+""+b+"  ");

                if(a*b<=N && !map.containsValue(a*b)) {
                    
                    map.put(count++,a*b);
                }
            }
        }

        for(int i=0 ; i<map.size(); i++)
            System.out.println("answer2:" + map.get(i));

        /*for(int i=0; i<P.length; i++){
            for(int j=P[i]; j<=Q[i]; j++){
                for(int k=0; k<list2.size(); k++){
                    if(j<=list2.get(k) && list2.get(k)<=j) arr[i]++;
                }
            }
        }*/

        return arr;
    }

    public boolean isPrime(int a){ //a는 양의 정수
        boolean check=true;
        for(int i=2; i<a; i++)
            if(a!=1 && a%i==0) check=false;
        return check;
    }
}
//11%



import java.util.*;

class Solution {
    public int[] solution(int N, int[] P, int[] Q) {
        
        LinkedList<Integer> list = new LinkedList <Integer>();
        HashMap<Integer,Integer> map = new HashMap <Integer,Integer>();
        int count=0;
        int [] arr= new int[P.length];

        int n=N/2;
        while(n>1){
            if(isPrime(n)) list.add(n);
            n--;
        }

        for(int i=0; i<list.size(); i++){
            for(int j=0; j<list.size(); j++){
                int a=list.get(i); 
                int b=list.get(j);
                if(a*b<=N && !map.containsValue(a*b)) map.put(count++,a*b);
            }
        }

        for(int i=0; i<P.length; i++){
            for(int j=P[i]; j<=Q[i]; j++){
                for(int k=0; k<map.size(); k++){
                    if(j<=map.get(k) && map.get(k)<=j) arr[i]++;
                }
            }
        }

        return arr;
    }

    public boolean isPrime(int a){ //a는 양의 정수
        boolean check=true;
        for(int i=2; i<a; i++)
            if(a!=1 && a%i==0) check=false;
        return check;
    }
}
//44% TO

//https://namget.tistory.com/entry/코딜리티-Lesson-11-CountSemiprimes

import java.util.*;

class Solution {
     public int[] solution(int N, int[] P, int[] Q) {

        int[] primeArray=new int[N+1];
        primeArray[0]=1;
        primeArray[1]=1;

        int i=2;
        while(i*i<=N) {
            if(primeArray[i]==0) {
                int k=i*i;
                while(k<=N) {
                    if(primeArray[k]==0) primeArray[k]=i;
                    k+=i;
                }
            }
            i++;
        }

        i=2;
        while(i*i<=N) {
            if(primeArray[i]==0) {
                int k=i*i;
                while(k<=N) {
                    if(primeArray[k/i]==0) primeArray[k]=-1;
                    k+=i;
                }
            }
            i++;
        }

        int[] result=new int[P.length];
        for(int a=0; a<P.length; a++) {
            int count=0;
            for(int k=P[a]; k<=Q[a]; k++) {
                if(primeArray[k]==-1) count++;
            }
            result[a]=count;
        }

        return result;
    }
}
//65%

//https://deefer.tistory.com/127

import java.util.*;

class Solution {
    public int[] solution(int N, int[] P, int[] Q) {

        int[] array=new int[50001];
        array[1]=1;

        for(int i=2; i<array.length; i++){
            for(int j=2; i*j<array.length; j++){
                if(array[i]==1) break;
                array[i*j]=1;
            }
        }

        for(int i=2; i<array.length; i++){
            for(int j=2; i*j<array.length; j++){
                if(array[i]==0 && array[j]==0) array[i*j]=2;
            }
        }
        
        int[] flag=new int[50001];
        int cnt=0;
        
        for(int i=0; i<array.length; i++){
            if(array[i]==2) cnt++;
            flag[i]=cnt;
        }
        
        int[] ans=new int[P.length];
        for(int i=0; i<ans.length; i++) ans[i]=flag[Q[i]]-flag[P[i]-1];
        
        return ans;
    }
}
//100%
