
//https://spacefordeveloper.tistory.com/332
//https://stack07142.tistory.com/289
//C++

#include <vector>
#include <math.h>
#include <algorithm>
#include <iostream>

using namespace std;


// 전역 변수를 정의할 경우 함수 내에 초기화 코드를 꼭 작성해주세요.
int solution(int n, vector<vector<int>> data) {
    int answer = 0;
    
    sort(data.begin(),data.end()); //먼저 정렬을 해준다. -> 효율성 업
    
    for(int i=0; i<n; i++){
        int x = data[i][0]; 
        int y = data[i][1]; 
       
        for(int j=i+1; j<n; j++){ 
                
            int nx = data[j][0]; 
            int ny = data[j][1]; 

  
           if(x==nx || y==ny) continue;  // 같은 x축 혹은 같은 y축에 있으면 넘어간다.
     
            int maxy,miny;
            if(y>ny){maxy = y; miny=ny;}  // x축기준으로 정렬을 했으므로 nx>x 이다. y를 큰y와 작은y로 구분해준다.
            else{
             miny = y;
             maxy = ny;
            }
            
            bool toggle = true;
                    
        for(int p=i+1; p<j; p++){ // 효율성 업, 탐색을 할 때 i+1 부터 시작해서 대각선을 이루는 상대점의 인덱스인 j만 탐색하도록한다 (앞에서 정렬을 했으므로)
        
        int tx = data[p][0]; //
        int ty = data[p][1];
        
        if(tx>x && tx<nx && ty>miny && ty<maxy){
            toggle =false;
            break;
        }

        }
    
        if(toggle == true){answer++;}
      }
                 
        }
    
    
    
    return answer;
} //100%

/*
import java.util.*;

class Solution {
    public int solution(int n, int[][] data) {
        int answer=0;
        Arrays.sort(data,(o1,o2)->Integer.compare(o1[0],o2[0]));
        for(int i=0; i<n; i++) {
            int x=data[i][0];
            int y=data[i][1];
            for(int j=i+1; j<n; j++) {
                int xx=data[j][0];
                int yy=data[j][0];
                if(x==xx || y==yy) continue;
                boolean flag=true;
                for(int k=i+1; k<j; k++) {
                    int cx=data[k][0];
                    int cy=data[k][1];
                    int min=Math.min(y,yy);
                    int max=Math.max(y,yy);
                    if((x<cx && cx<xx) && (min<cy && cy<max)) {
                        flag=false;
                        break;
                    }
                }
                if(flag==true) answer++;
            }
        }
        return answer;
    }
} //JAVA
*/
