from collections import deque
INF=int(1e9)

n=int(input())
array=[]
for i in range(n):
  array.append(list(map(int,input().split())))

now_size=2 #아기상어 현재 크기
now_x, now_y=0,0 #아기상어 현재 위치

#아기상어 위치 발견 후 해당 위치에는 아무것도 없다고 표시함
for i in range(n):
  for j in range(n):
    if array[i][j]==9:
      now_x,now_y=i,j
      array[now_x][now_y]=0

dx=[-1,0,1,0]
dy=[0,1,0,-1]

def bfs():
  dist=[[-1]*n for _ in range(n)] #-1 도달할 수 없음 (초기화)
  q=deque([(now_x,now_y)])
  dist[now_x][now_y]=0
  while q:
    x,y=q.popleft()
    for i in range(4):
      nx=x+dx[i]
      ny=y+dy[i]
      if nx>=0 and nx<n and ny>=0 and ny<n:
        if dist[nx][ny]==-1 and array[nx][ny]<=now_size:
          dist[nx][ny]=dist[x][y]+1
          q.append((nx,ny))
  return dist

#먹을 물고기 찾는 함수
def find(dist):
  x,y=0,0
  min_dist=INF
  for i in range(n):
    for j in range(n):
      #도달 가능하며 먹을 수 있는 물고기 일때
      if dist[i][j]!=-1 and array[i][j]>=1 and array[i][j]<now_size:
        #가장 가까운 물고기 1마리만 선택
        if dist[i][j]<min_dist:
          x,y=i,j
          min_dist=dist[i][j]
  if min_dist==INF:
    return None
  else:
    return x,y,min_dist

result=0
ate=0 #현재 크기에서 먹은 양

while True:
  value=find(bfs())
  if value==None:
    print(result)
    break
  else:
    now_x,now_y=value[0],value[1]
    result+=value[2]
    array[now_x][now_y]=0
    ate+=1
    #자신의 현재 크기 이상으로 먹은 경우 크기 증가
    if ate>=now_size:
      now_size+=1
      ate=0
