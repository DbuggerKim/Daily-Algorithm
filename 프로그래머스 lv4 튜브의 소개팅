//https://kyounju.tistory.com/12
//C++

#include <vector>
using namespace std;
typedef long long ll;
int dx[] = {1,-1,0,0};
int dy[] = {0,0,1,-1};
ll dp[51][51][2510];
const ll inf = (ll)1 << 31;
vector<int> solution(int m, int n, int s, vector<vector<int>> time_map) {
    vector<int> answer;
    for(int y = 0; y <= 50; ++y)
        for(int x = 0; x <= 50; ++x)
            for(int i = 0; i < 2510; ++i)
                dp[y][x][i] = inf;
    dp[0][0][0] = 0;
    for(int d = 0; d < 2500; ++d)
        for(int y = 0; y < m; ++y)
            for(int x = 0; x < n; ++x) {
                if(time_map[y][x] == -1) continue;
                for(int i = 0; i < 4; ++i) {
                    int newy = y + dy[i];
                    int newx = x + dx[i];
                    if(newy < 0 || newx < 0 || newy >= m || newx >= n) continue;
                    if(dp[y][x][d] + time_map[y][x] <= s)
                        dp[newy][newx][d+1] = min(dp[newy][newx][d+1],dp[y][x][d] + time_map[y][x]);
                }
            }
    for(int i = 0; i < 2500; ++i)
        if(dp[m-1][n-1][i] != inf) {
            answer = {i, (int)dp[m-1][n-1][i]};
            break;
        }
    return answer;
}//100%

/*
class Solution {
    int[] dy={0,0,1,-1,};
    int[] dx={1,-1,0,0};    
    int[][][] dp=new int[51][51][2510];
    public int[] solution(int m, int n, int s, int[][] time_map) {

        for(int y=0; y<=50; y++) {
            for(int x=0; x<=50; x++) {
                for(int i=0; i<2510; i++) {
                    dp[y][x][i]=Integer.MAX_VALUE;
                }
            }
        }
        
        dp[0][0][0]=0;
        for(int d=0; d<2500; d++) {
            for(int y=0; y<m; y++) {
                for(int x=0; x<n; x++) {
                    if(time_map[y][x]==-1) continue;
                    for(int i=0; i<4; i++) {
                        int newy=y+dy[i];
                        int newx=x+dx[i];
                        if(newy<0 || newx<0 || newy>=m || newx>=n) continue;
                        if(dp[y][x][d]+time_map[y][x]<=s) {
                            dp[newy][newx][d+1]=Math.min(dp[newy][newx][d+1],dp[y][x][d]+time_map[y][x]);
                        }
                    }
                }
            }
        }
        
        int[] answer=new int[2];
        for(int i=0; i<2500; i++) {
            if(dp[m-1][n-1][i]!=Integer.MAX_VALUE) {
                answer[0]=i;
                answer[1]=(int)dp[m-1][n-1][i];
                break;
            }
        }
        return answer;
    }
}
*/
