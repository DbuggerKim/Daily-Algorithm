class Solution {
    public int solution(int[][] triangle) {

        int[][] dp = new int[triangle.length][triangle.length];
        dp[0][0] = triangle[0][0];

        for (int i=1; i< triangle.length; i++) {

            dp[i][0] = triangle[i][0] + dp[i - 1][0];

            for (int j=1; j<i+1; j++) {
                dp[i][j] = triangle[i][j] + Math.max(dp[i -1][j - 1], dp[i -1][j]);
            }
        }

        int max = 0;
        for (int i=0; i<dp[dp.length - 1].length; i++) {
            max = Math.max(dp[dp.length - 1][i], max);
        }


        int answer = max;
        return answer;
    }
} //100%


class Solution {
    public int solution(int[][] triangle) {
        
        int[][] dp=new int[triangle.length][triangle.length];//5*5
        dp[0][0]=triangle[0][0];
        for(int i=1; i<triangle.length; i++){
            dp[i][0]=triangle[i][0]+dp[i-1][0];
            for(int j=1; j<i+1; j++){//대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동
                dp[i][j]=triangle[i][j]+Math.max(dp[i-1][j-1], dp[i-1][j]);
            }
        }
        
        int max=0;
        for(int i=0; i<dp[dp.length-1].length; i++){ //도착지점인 마지막줄만 검사
            max=Math.max(dp[dp.length-1][i], max);
        }
        
        return max;
    }
} //100%




import java.util.*;

class Solution {
    public int solution(int[][] triangle) {
        int[][] dp=new int[triangle.length][triangle.length];
        dp[0][0]=triangle[0][0];
        
        for(int i=1; i<dp.length; i++) {
            dp[i][0]=triangle[i][0]+dp[i-1][0];
            for(int j=1; j<i+1; j++) {
                dp[i][j]=triangle[i][j]+Math.max(dp[i-1][j-1],dp[i-1][j]);
            }
        }
        
        int max=Integer.MIN_VALUE;
        for(int i=0; i<dp.length; i++) {
            max=Math.max(max,dp[dp.length-1][i]);
        }
        return max;
    }
}//100%
